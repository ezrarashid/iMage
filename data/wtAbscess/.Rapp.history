rm(list = ls())
library(rootSolve)#
#
ns<-seq(1,100,0.1)#
### for diminishing benefit#
dim_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(1600* exp(0.8*get("x")*y) )/((1 + (exp(0.8*get("x")*y))^2)*get("x"))	#
	}#
dimsol1 <- vector(length=length(ns))#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol1[i]<-uniroot.all(dim_grad,c(0,1)),dimsol1[i]<-NA)#
	}#
#dimsol1[dimsol1>1]<-NA#
#
dimsol2 <- vector(length=length(ns))#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol2[i]<-uniroot.all(dim_grad,c(0,1)),dimsol2[i]<-NA)#
	}#
#dimsol2[dimsol2>1]<-NA#
#
dimsol3 <- vector(length=length(ns))#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol3[i]<-uniroot.all(dim_grad,c(0,1)),dimsol3[i]<-NA)#
	}#
#dimsol3[dimsol3>1]<-NA#
### for accelerating benefit#
acc_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(0.3*(y + (-1 + get("x"))*y)^2)/get("x")	#
	}#
accsol1 <- vector(length=length(ns))#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol1[i]<-uniroot.all(acc_grad,c(0,1)),accsol1[i]<-NA)#
	}#
#accsol1[accsol1>1]<-NA#
#
accsol2 <- vector(length=length(ns))#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol2[i]<-uniroot.all(acc_grad,c(0,1)),accsol2[i]<-NA)#
	}#
#accsol2[accsol2>1]<-NA#
#
accsol3 <- vector(length=length(ns))#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol3[i]<-uniroot.all(acc_grad,c(0,1)),accsol3[i]<-NA)#
	}#
#accsol3[accsol3>1]<-NA#
### for sigmoidal benefit#
sig_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(3000*exp(7 - 0.3*(y + (-1 + get("x"))*y)))/(((2 + exp(7 - 0.3*(y + (-1 + get("x")) *y)))^2)*get("x"))#
	}#
sigsol1 <- matrix(nrow=length(ns),ncol=2)#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
	if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol1[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol1[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol1[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol1[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol1[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}#
	}#
#sigsol1[sigsol1>1]<-NA#
#
sigsol2 <- matrix(nrow=length(ns),ncol=2)#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol2[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol2[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol2[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol2[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol2[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}	}#
#sigsol2[sigsol2>1]<-NA#
#
sigsol3 <- matrix(nrow=length(ns),ncol=2)#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol3[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol3[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol3[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol3[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol3[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}	}#
#sigsol3[sigsol3>1]<-NA#
nx <- seq(0,100,0.1)#
#
x<-nx#
#
a<-2000#
d<-1#
B<-1#
k<-0#
b<-0.8#
bd <- a*((B+d*exp(k-b*x))^(-1))-a*((B+d*exp(k))^(-1)) # decelerating benefit curve#
#
b<-0.1#
a<-3#
ba <- b*(x^a) # accelerating benefit curve#
#
a<-10000#
d<-1#
B<-2#
k<-7#
b<-0.3#
bs <- a*((B+d*exp(k-b*x))^(-1))-a*((B+d*exp(k))^(-1)) # sigmoidal benefit curve#
############### plots#
dev.new()#
par(mfrow=c(3,3),mar=c(5,5,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", adj = 0, col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", adj = 0, col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", adj = 0, col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", adj = 0, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", adj = 0, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", adj = 0, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", adj = 0, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", adj = 0, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", adj = 0, col = "black")#
###### Plot of Brown & Johnstone model#
r<-seq(0,1,0.01)#
c<-0.04#
p<-100#
n<-1000#
#
coop<-(1+r*(n-1)-c*p)/(c*(1+r*(n-1)+n))#
coop_n_thresh<-(c*p-(1-r))/r#
coop[coop_n_thresh>n]<-0#
#
sig <- (1+r*(n-1))*((r*(c*p+1)+c*p-1)/(c*(r*(n-1)+n+1)^2))*(n-c*p-2*c*n*((1+r*(n-1)-c*p)/(c*(r*(n-1)+n+1))))#
#
quartz("", 6, 5)#
par(fg = "grey", mar = c(6, 6, 2, 2))#
plot(r,coop,col="white",ylab="ESS investment",xlab="Relatedness")#
lines(r,coop,col="gray75",lwd=2)#
lines(r,sig,col="black",lwd=2)#
legend(0.3,2,lty=1,lwd=2,#
       legend=c("Public good","Signalling"),#
       col=c("gray75", "black"),#
       bty="n", text.col = "black")
install.packages("rootSolve")
library(rootSolve)#
#
ns<-seq(1,100,0.1)#
### for diminishing benefit#
dim_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(1600* exp(0.8*get("x")*y) )/((1 + (exp(0.8*get("x")*y))^2)*get("x"))	#
	}#
dimsol1 <- vector(length=length(ns))#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol1[i]<-uniroot.all(dim_grad,c(0,1)),dimsol1[i]<-NA)#
	}#
#dimsol1[dimsol1>1]<-NA#
#
dimsol2 <- vector(length=length(ns))#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol2[i]<-uniroot.all(dim_grad,c(0,1)),dimsol2[i]<-NA)#
	}#
#dimsol2[dimsol2>1]<-NA#
#
dimsol3 <- vector(length=length(ns))#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol3[i]<-uniroot.all(dim_grad,c(0,1)),dimsol3[i]<-NA)#
	}#
#dimsol3[dimsol3>1]<-NA#
### for accelerating benefit#
acc_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(0.3*(y + (-1 + get("x"))*y)^2)/get("x")	#
	}#
accsol1 <- vector(length=length(ns))#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol1[i]<-uniroot.all(acc_grad,c(0,1)),accsol1[i]<-NA)#
	}#
#accsol1[accsol1>1]<-NA#
#
accsol2 <- vector(length=length(ns))#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol2[i]<-uniroot.all(acc_grad,c(0,1)),accsol2[i]<-NA)#
	}#
#accsol2[accsol2>1]<-NA#
#
accsol3 <- vector(length=length(ns))#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol3[i]<-uniroot.all(acc_grad,c(0,1)),accsol3[i]<-NA)#
	}#
#accsol3[accsol3>1]<-NA#
### for sigmoidal benefit#
sig_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(3000*exp(7 - 0.3*(y + (-1 + get("x"))*y)))/(((2 + exp(7 - 0.3*(y + (-1 + get("x")) *y)))^2)*get("x"))#
	}#
sigsol1 <- matrix(nrow=length(ns),ncol=2)#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
	if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol1[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol1[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol1[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol1[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol1[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}#
	}#
#sigsol1[sigsol1>1]<-NA#
#
sigsol2 <- matrix(nrow=length(ns),ncol=2)#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol2[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol2[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol2[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol2[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol2[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}	}#
#sigsol2[sigsol2>1]<-NA#
#
sigsol3 <- matrix(nrow=length(ns),ncol=2)#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol3[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol3[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol3[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol3[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol3[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}	}#
#sigsol3[sigsol3>1]<-NA#
nx <- seq(0,100,0.1)#
#
x<-nx#
#
a<-2000#
d<-1#
B<-1#
k<-0#
b<-0.8#
bd <- a*((B+d*exp(k-b*x))^(-1))-a*((B+d*exp(k))^(-1)) # decelerating benefit curve#
#
b<-0.1#
a<-3#
ba <- b*(x^a) # accelerating benefit curve#
#
a<-10000#
d<-1#
B<-2#
k<-7#
b<-0.3#
bs <- a*((B+d*exp(k-b*x))^(-1))-a*((B+d*exp(k))^(-1)) # sigmoidal benefit curve#
############### plots#
dev.new()#
par(mfrow=c(3,3),mar=c(5,5,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", adj = 0, col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", adj = 0, col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", adj = 0, col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", adj = 0, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", adj = 0, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", adj = 0, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", adj = 0, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", adj = 0, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", adj = 0, col = "black")#
###### Plot of Brown & Johnstone model#
r<-seq(0,1,0.01)#
c<-0.04#
p<-100#
n<-1000#
#
coop<-(1+r*(n-1)-c*p)/(c*(1+r*(n-1)+n))#
coop_n_thresh<-(c*p-(1-r))/r#
coop[coop_n_thresh>n]<-0#
#
sig <- (1+r*(n-1))*((r*(c*p+1)+c*p-1)/(c*(r*(n-1)+n+1)^2))*(n-c*p-2*c*n*((1+r*(n-1)-c*p)/(c*(r*(n-1)+n+1))))#
#
quartz("", 6, 5)#
par(fg = "grey", mar = c(6, 6, 2, 2))#
plot(r,coop,col="white",ylab="ESS investment",xlab="Relatedness")#
lines(r,coop,col="gray75",lwd=2)#
lines(r,sig,col="black",lwd=2)#
legend(0.3,2,lty=1,lwd=2,#
       legend=c("Public good","Signalling"),#
       col=c("gray75", "black"),#
       bty="n", text.col = "black")
############### plots#
dev.new()#
par(mfrow=c(3,3),mar=c(4,5,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", adj = 0, col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", adj = 0, col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", adj = 0, col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", adj = 0, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", adj = 0, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", adj = 0, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", adj = 0, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", adj = 0, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", adj = 0, col = "black")
############### plots#
dev.new()#
par(mfrow=c(3,3),mar=c(5,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", adj = 0, col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", adj = 0, col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", adj = 0, col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", adj = 0, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", adj = 0, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", adj = 0, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", adj = 0, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", adj = 0, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", adj = 0, col = "black")
############### plots#
dev.new()#
par(mfrow=c(3,3),mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", adj = 0, col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", adj = 0, col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", adj = 0, col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", adj = 0, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", adj = 0, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", adj = 0, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", adj = 0, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", adj = 0, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", adj = 0, col = "black")
############### plots#
quartz("", 7, 7)#
par(mfrow=c(3,3),mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", adj = 0, col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", adj = 0, col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", adj = 0, col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", adj = 0, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", adj = 0, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", adj = 0, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", adj = 0, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", adj = 0, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", adj = 0, col = "black")
############### plots#
quartz("", 7, 7)#
par(mfrow=c(3,3),mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A diminishing", adj = 0, col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B accelerating", adj = 0, col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C sigmoidal", adj = 0, col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", adj = 0, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", adj = 0, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", adj = 0, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", adj = 0, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", adj = 0, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", adj = 0, col = "black")
mtext("accelerating", col = "black")
############### plots#
quartz("", 7, 7)#
par(mfrow=c(3,3),mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A1", adj = 0, col = "black")#
mtext("diminishing", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B1", adj = 0, col = "black")#
mtext("accelerating", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C1", adj = 0, col = "black")#
mtext("sigmoidal", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("A2", adj = 0, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("B2", adj = 0, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("C2", adj = 0, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("A3", adj = 0, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("B3", adj = 0, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("C3", adj = 0, col = "black")
?mtext
############### plots#
quartz("", 7, 7)#
par(mfrow=c(3,3),mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A1", at = -1, col = "black")#
mtext("diminishing", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B1", adj = 0, col = "black")#
mtext("accelerating", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C1", adj = 0, col = "black")#
mtext("sigmoidal", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("A2", adj = 0, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("B2", adj = 0, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("C2", adj = 0, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("A3", adj = 0, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("B3", adj = 0, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("C3", adj = 0, col = "black")
mtext("A1", at = -5, col = "black")
mtext("A1", at = -7, col = "black")
mtext("A1", at = -10, col = "black")
############### plots#
quartz("", 7, 7)#
par(mfrow=c(3,3),mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A1", at = -10, col = "black")#
mtext("diminishing", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B1", at = -10, col = "black")#
mtext("accelerating", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C1", at = -10, col = "black")#
mtext("sigmoidal", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("A2", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("B2", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("C2", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("A3", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("B3", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("C3", at = -10, col = "black")
############### plots#
quartz("", 7, 6)#
par(mfrow=c(3,3),mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A1", at = -10, col = "black")#
mtext("diminishing", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B1", at = -10, col = "black")#
mtext("accelerating", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C1", at = -10, col = "black")#
mtext("sigmoidal", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("A2", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("B2", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("C2", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("A3", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("B3", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("C3", at = -10, col = "black")
############### plots#
quartz("", 7, 6)#
par(mfrow=c(3,3),mar=c(3,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A1", at = -10, col = "black")#
mtext("diminishing", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B1", at = -10, col = "black")#
mtext("accelerating", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C1", at = -10, col = "black")#
mtext("sigmoidal", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("A2", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("B2", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("C2", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("A3", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("B3", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("C3", at = -10, col = "black")
############### plots#
quartz("", 8, 7)#
par(mfrow=c(3,3),mar=c(3,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A1", at = -10, col = "black")#
mtext("diminishing", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B1", at = -10, col = "black")#
mtext("accelerating", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C1", at = -10, col = "black")#
mtext("sigmoidal", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("A2", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("B2", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("C2", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("A3", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("B3", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("C3", at = -10, col = "black")
############### plots#
quartz("", 8, 7)#
par(mfrow=c(3,3),mar=c(3,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
############### plots#
quartz("", 8, 7)#
par(mfrow=c(3,3),mar=c(2,7,1,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3),mar=c(2,7,1,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(1, 1, 1, 1), mar=c(2,7,1,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(1, 1, 1, 1), mar=c(2,7,1,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing benefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating benefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal benefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(1, 1, 1, 1), mar=c(2,7,1,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(2,7,1,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(2,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), #
    mar=c(2,7,2,2), fg = "grey", las = 1,#
    mgp = c(3, 1, 0))#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), #
    mar=c(2,7,2,2), fg = "grey", las = 1,#
    mgp = c(2, 1, 0))#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(3,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")
library(rootSolve)#
#
ns<-seq(1,100,0.1)#
### for diminishing benefit#
dim_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(1600* exp(0.8*get("x")*y) )/((1 + (exp(0.8*get("x")*y))^2)*get("x"))	#
	}#
dimsol1 <- vector(length=length(ns))#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol1[i]<-uniroot.all(dim_grad,c(0,1)),dimsol1[i]<-NA)#
	}#
#dimsol1[dimsol1>1]<-NA#
#
dimsol2 <- vector(length=length(ns))#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol2[i]<-uniroot.all(dim_grad,c(0,1)),dimsol2[i]<-NA)#
	}#
#dimsol2[dimsol2>1]<-NA#
#
dimsol3 <- vector(length=length(ns))#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol3[i]<-uniroot.all(dim_grad,c(0,1)),dimsol3[i]<-NA)#
	}#
#dimsol3[dimsol3>1]<-NA#
### for accelerating benefit#
acc_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(0.3*(y + (-1 + get("x"))*y)^2)/get("x")	#
	}#
accsol1 <- vector(length=length(ns))#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol1[i]<-uniroot.all(acc_grad,c(0,1)),accsol1[i]<-NA)#
	}#
#accsol1[accsol1>1]<-NA#
#
accsol2 <- vector(length=length(ns))#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol2[i]<-uniroot.all(acc_grad,c(0,1)),accsol2[i]<-NA)#
	}#
#accsol2[accsol2>1]<-NA#
#
accsol3 <- vector(length=length(ns))#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol3[i]<-uniroot.all(acc_grad,c(0,1)),accsol3[i]<-NA)#
	}#
#accsol3[accsol3>1]<-NA#
### for sigmoidal benefit#
sig_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(3000*exp(7 - 0.3*(y + (-1 + get("x"))*y)))/(((2 + exp(7 - 0.3*(y + (-1 + get("x")) *y)))^2)*get("x"))#
	}#
sigsol1 <- matrix(nrow=length(ns),ncol=2)#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
	if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol1[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol1[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol1[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol1[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol1[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}#
	}#
#sigsol1[sigsol1>1]<-NA#
#
sigsol2 <- matrix(nrow=length(ns),ncol=2)#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol2[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol2[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol2[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol2[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol2[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}	}#
#sigsol2[sigsol2>1]<-NA#
#
sigsol3 <- matrix(nrow=length(ns),ncol=2)#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol3[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol3[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol3[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol3[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol3[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}	}#
#sigsol3[sigsol3>1]<-NA#
nx <- seq(0,100,0.1)#
#
x<-nx#
#
a<-2000#
d<-1#
B<-1#
k<-0#
b<-0.8#
bd <- a*((B+d*exp(k-b*x))^(-1))-a*((B+d*exp(k))^(-1)) # decelerating benefit curve#
#
b<-0.1#
a<-3#
ba <- b*(x^a) # accelerating benefit curve#
#
a<-10000#
d<-1#
B<-2#
k<-7#
b<-0.3#
bs <- a*((B+d*exp(k-b*x))^(-1))-a*((B+d*exp(k))^(-1)) # sigmoidal benefit curve#
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")#
############### plots without relatedness#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol3,col="black",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol3,col="black",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol3[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol3[,2],col="black",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")#
###### Plot of Brown & Johnstone model#
r<-seq(0,1,0.01)#
c<-0.04#
p<-100#
n<-1000#
#
coop<-(1+r*(n-1)-c*p)/(c*(1+r*(n-1)+n))#
coop_n_thresh<-(c*p-(1-r))/r#
coop[coop_n_thresh>n]<-0#
#
sig <- (1+r*(n-1))*((r*(c*p+1)+c*p-1)/(c*(r*(n-1)+n+1)^2))*(n-c*p-2*c*n*((1+r*(n-1)-c*p)/(c*(r*(n-1)+n+1))))#
#
quartz("", 6, 5)#
par(fg = "grey", mar = c(6, 6, 2, 2))#
plot(r,coop,col="white",ylab="ESS investment",xlab="Relatedness")#
lines(r,coop,col="gray75",lwd=2)#
lines(r,sig,col="black",lwd=2)#
legend(0.3,2,lty=1,lwd=2,#
       legend=c("Public good","Signalling"),#
       col=c("gray75", "black"),#
       bty="n", text.col = "black")
############### plots without relatedness#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol3,col="black",lwd=2)#
mtext("G", at = -10, col = "black")#
mtext("attractor", col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol3,col="black",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
mtext("repellor", col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol3[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol3[,2],col="black",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")#
mtext("both", col = "black")
############### plots without relatedness#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol3,col="black",lwd=2)#
mtext("G", at = -10, col = "black")#
mtext("attractor", col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol3,col="black",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
mtext("repellor", col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol3[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol3[,2],col="black",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")#
mtext("attractor and repellor", col = "black")
############### plots without relatedness#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol3,col="black",lwd=2)#
mtext("G", at = -10, col = "black")#
mtext("attractor", col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol3,col="black",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
mtext("repellor", col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol3[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol3[,2],col="black",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")#
mtext("attractor + repellor", col = "black")
############### plots without relatedness#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black", cex = .8)#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black", cex = .8)#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black", cex = .8)#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol3,col="black",lwd=2)#
mtext("G", at = -10, col = "black")#
mtext("attractor", col = "black", cex = .8)#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol3,col="black",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
mtext("repellor", col = "black", cex = .8)#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol3[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol3[,2],col="black",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")#
mtext("attractor & repellor", col = "black", cex = .8)
library(rootSolve)#
#
ns<-seq(1,100,0.1)#
### for diminishing benefit#
dim_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(1600* exp(0.8*get("x")*y) )/((1 + (exp(0.8*get("x")*y))^2)*get("x"))	#
	}#
dimsol1 <- vector(length=length(ns))#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol1[i]<-uniroot.all(dim_grad,c(0,1)),dimsol1[i]<-NA)#
	}#
#dimsol1[dimsol1>1]<-NA#
#
dimsol2 <- vector(length=length(ns))#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol2[i]<-uniroot.all(dim_grad,c(0,1)),dimsol2[i]<-NA)#
	}#
#dimsol2[dimsol2>1]<-NA#
#
dimsol3 <- vector(length=length(ns))#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol3[i]<-uniroot.all(dim_grad,c(0,1)),dimsol3[i]<-NA)#
	}#
#dimsol3[dimsol3>1]<-NA#
### for accelerating benefit#
acc_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(0.3*(y + (-1 + get("x"))*y)^2)/get("x")	#
	}#
accsol1 <- vector(length=length(ns))#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol1[i]<-uniroot.all(acc_grad,c(0,1)),accsol1[i]<-NA)#
	}#
#accsol1[accsol1>1]<-NA#
#
accsol2 <- vector(length=length(ns))#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol2[i]<-uniroot.all(acc_grad,c(0,1)),accsol2[i]<-NA)#
	}#
#accsol2[accsol2>1]<-NA#
#
accsol3 <- vector(length=length(ns))#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol3[i]<-uniroot.all(acc_grad,c(0,1)),accsol3[i]<-NA)#
	}#
#accsol3[accsol3>1]<-NA#
### for sigmoidal benefit#
sig_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(3000*exp(7 - 0.3*(y + (-1 + get("x"))*y)))/(((2 + exp(7 - 0.3*(y + (-1 + get("x")) *y)))^2)*get("x"))#
	}#
sigsol1 <- matrix(nrow=length(ns),ncol=2)#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
	if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol1[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol1[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol1[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol1[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol1[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}#
	}#
#sigsol1[sigsol1>1]<-NA#
#
sigsol2 <- matrix(nrow=length(ns),ncol=2)#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol2[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol2[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol2[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol2[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol2[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}	}#
#sigsol2[sigsol2>1]<-NA#
#
sigsol3 <- matrix(nrow=length(ns),ncol=2)#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol3[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol3[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol3[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol3[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol3[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}	}#
#sigsol3[sigsol3>1]<-NA#
nx <- seq(0,100,0.1)#
#
x<-nx#
#
a<-2000#
d<-1#
B<-1#
k<-0#
b<-0.8#
bd <- a*((B+d*exp(k-b*x))^(-1))-a*((B+d*exp(k))^(-1)) # decelerating benefit curve#
#
b<-0.1#
a<-3#
ba <- b*(x^a) # accelerating benefit curve#
#
a<-10000#
d<-1#
B<-2#
k<-7#
b<-0.3#
bs <- a*((B+d*exp(k-b*x))^(-1))-a*((B+d*exp(k))^(-1)) # sigmoidal benefit curve#
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("decelerating\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")#
############### plots without relatedness#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black", cex = .8)#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black", cex = .8)#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black", cex = .8)#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol3,col="black",lwd=2)#
mtext("G", at = -10, col = "black")#
mtext("attractor", col = "black", cex = .8)#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol3,col="black",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
mtext("repellor", col = "black", cex = .8)#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol3[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol3[,2],col="black",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")#
mtext("attractor & repellor", col = "black", cex = .8)#
###### Plot of Brown & Johnstone model#
r<-seq(0,1,0.01)#
c<-0.04#
p<-100#
n<-1000#
#
coop<-(1+r*(n-1)-c*p)/(c*(1+r*(n-1)+n))#
coop_n_thresh<-(c*p-(1-r))/r#
coop[coop_n_thresh>n]<-0#
#
sig <- (1+r*(n-1))*((r*(c*p+1)+c*p-1)/(c*(r*(n-1)+n+1)^2))*(n-c*p-2*c*n*((1+r*(n-1)-c*p)/(c*(r*(n-1)+n+1))))#
#
quartz("", 6, 5)#
par(fg = "grey", mar = c(6, 6, 2, 2))#
plot(r,coop,col="white",ylab="ESS investment",xlab="Relatedness")#
lines(r,coop,col="gray75",lwd=2)#
lines(r,sig,col="black",lwd=2)#
legend(0.3,2,lty=1,lwd=2,#
       legend=c("Public good","Signalling"),#
       col=c("gray75", "black"),#
       bty="n", text.col = "black")
library(rootSolve)#
#
ns<-seq(1,100,0.1)#
### for diminishing benefit#
dim_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(1600* exp(0.8*get("x")*y) )/((1 + (exp(0.8*get("x")*y))^2)*get("x"))	#
	}#
dimsol1 <- vector(length=length(ns))#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol1[i]<-uniroot.all(dim_grad,c(0,1)),dimsol1[i]<-NA)#
	}#
#dimsol1[dimsol1>1]<-NA#
#
dimsol2 <- vector(length=length(ns))#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol2[i]<-uniroot.all(dim_grad,c(0,1)),dimsol2[i]<-NA)#
	}#
#dimsol2[dimsol2>1]<-NA#
#
dimsol3 <- vector(length=length(ns))#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(dim_grad,c(0,2))#
	ifelse(length(uniroot.all(dim_grad,c(0,1)))>0,dimsol3[i]<-uniroot.all(dim_grad,c(0,1)),dimsol3[i]<-NA)#
	}#
#dimsol3[dimsol3>1]<-NA#
### for accelerating benefit#
acc_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(0.3*(y + (-1 + get("x"))*y)^2)/get("x")	#
	}#
accsol1 <- vector(length=length(ns))#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol1[i]<-uniroot.all(acc_grad,c(0,1)),accsol1[i]<-NA)#
	}#
#accsol1[accsol1>1]<-NA#
#
accsol2 <- vector(length=length(ns))#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol2[i]<-uniroot.all(acc_grad,c(0,1)),accsol2[i]<-NA)#
	}#
#accsol2[accsol2>1]<-NA#
#
accsol3 <- vector(length=length(ns))#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(acc_grad,c(0,2))#
	ifelse(length(uniroot.all(acc_grad,c(0,1)))>0,accsol3[i]<-uniroot.all(acc_grad,c(0,1)),accsol3[i]<-NA)#
	}#
#accsol3[accsol3>1]<-NA#
### for sigmoidal benefit#
sig_grad<-function(y) {#
	 -5 + (1+(get("x")-1)*get("r"))*(3000*exp(7 - 0.3*(y + (-1 + get("x"))*y)))/(((2 + exp(7 - 0.3*(y + (-1 + get("x")) *y)))^2)*get("x"))#
	}#
sigsol1 <- matrix(nrow=length(ns),ncol=2)#
r<-0#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
	if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol1[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol1[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol1[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol1[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol1[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}#
	}#
#sigsol1[sigsol1>1]<-NA#
#
sigsol2 <- matrix(nrow=length(ns),ncol=2)#
r<-0.1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol2[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol2[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol2[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol2[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol2[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}	}#
#sigsol2[sigsol2>1]<-NA#
#
sigsol3 <- matrix(nrow=length(ns),ncol=2)#
r<-1#
for (i in 1:length(ns)){#
	x<-ns[i]#
	Z<-uniroot.all(sig_grad,c(0,2))#
if (length(uniroot.all(sig_grad,c(0,1)))==0){#
		sigsol3[i,]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==1){#
		sigsol3[i,1]<-uniroot.all(sig_grad,c(0,1))#
		sigsol3[i,2]<-NA#
	}#
	if (length(uniroot.all(sig_grad,c(0,1)))==2){#
		sigsol3[i,1]<-uniroot.all(sig_grad,c(0,1))[1]#
		sigsol3[i,2]<-uniroot.all(sig_grad,c(0,1))[2]#
	}	}#
#sigsol3[sigsol3>1]<-NA#
nx <- seq(0,100,0.1)#
#
x<-nx#
#
a<-2000#
d<-1#
B<-1#
k<-0#
b<-0.8#
bd <- a*((B+d*exp(k-b*x))^(-1))-a*((B+d*exp(k))^(-1)) # decelerating benefit curve#
#
b<-0.1#
a<-3#
ba <- b*(x^a) # accelerating benefit curve#
#
a<-10000#
d<-1#
B<-2#
k<-7#
b<-0.3#
bs <- a*((B+d*exp(k-b*x))^(-1))-a*((B+d*exp(k))^(-1)) # sigmoidal benefit curve#
############### plots#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("decelerating\nbenefit function", col = "black")#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black")#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black")#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol1, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol1,col="black",lwd=2)#
lines(ns,dimsol2,col="gray50",lwd=2)#
lines(ns,dimsol3,col="gray75",lwd=2)#
mtext("G", at = -10, col = "black")#
#
plot(ns,accsol1,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol1,col="black",lwd=2,lty=2)#
lines(ns,accsol2,col="gray50",lwd=2,lty=2)#
lines(ns,accsol3,col="gray75",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol1[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,1],col="gray50",lwd=2,lty=2)#
lines(ns,sigsol3[,1],col="gray75",lwd=2,lty=2)#
lines(ns,sigsol1[,2],col="black",lwd=2,lty=1)#
lines(ns,sigsol2[,2],col="gray50",lwd=2,lty=1)#
lines(ns,sigsol3[,2],col="gray75",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")#
############### plots without relatedness#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("diminishing\nbenefit function", col = "black", cex = .8)#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black", cex = .8)#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black", cex = .8)#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol2, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol3,col="black",lwd=2)#
mtext("G", at = -10, col = "black")#
mtext("attractor", col = "black", cex = .8)#
#
plot(ns,accsol2,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol2,col="black",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
mtext("repellor", col = "black", cex = .8)#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol2[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,2],col="black",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")#
mtext("attractor & repellor", col = "black", cex = .8)#
###### Plot of Brown & Johnstone model#
r<-seq(0,1,0.01)#
c<-0.04#
p<-100#
n<-1000#
#
coop<-(1+r*(n-1)-c*p)/(c*(1+r*(n-1)+n))#
coop_n_thresh<-(c*p-(1-r))/r#
coop[coop_n_thresh>n]<-0#
#
sig <- (1+r*(n-1))*((r*(c*p+1)+c*p-1)/(c*(r*(n-1)+n+1)^2))*(n-c*p-2*c*n*((1+r*(n-1)-c*p)/(c*(r*(n-1)+n+1))))#
#
quartz("", 6, 5)#
par(fg = "grey", mar = c(6, 6, 2, 2))#
plot(r,coop,col="white",ylab="ESS investment",xlab="Relatedness")#
lines(r,coop,col="gray75",lwd=2)#
lines(r,sig,col="black",lwd=2)#
legend(0.3,2,lty=1,lwd=2,#
       legend=c("Public good","Signalling"),#
       col=c("gray75", "black"),#
       bty="n", text.col = "black")
############### plots without relatedness#
quartz("", 8, 6)#
par(mfrow=c(3,3), oma = c(2, 2, 2, 2), mar=c(4,7,2,2), fg = "grey", las = 1)#
#
plot(nx,bd,col="white",#
     ylab=expression(Total~benefit~(italic(B)(italic(nx)))), #
     xlab="")#
lines(nx,bd,col="black",lwd=2)#
mtext("A", at = -10, col = "black")#
mtext("decelerating\nbenefit function", col = "black", cex = .8)#
#
plot(nx, ba, col="white", ylab="", xlab="")#
lines(nx,ba,col="black",lwd=2)#
mtext("B", at = -10, col = "black")#
mtext("accelerating\nbenefit function", col = "black", cex = .8)#
#
plot(nx,bs,col="white",ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs,col="black",lwd=2)#
mtext("C", at = -10, col = "black")#
mtext("sigmoidal\nbenefit function", col = "black", cex = .8)#
#
plot(nx,bd/nx,col="white",#
     ylab=expression(Per~capita~benefit~(italic(B)(italic(nx))/italic(n))), #
     xlab="")#
lines(nx,bd/nx,col="black",lwd=2)#
mtext("D", at = -10, col = "black")#
#
plot(nx,ba/nx,col="white", ylab="", xlab="")#
lines(nx,ba/nx,col="black",lwd=2)#
mtext("E", at = -10, col = "black")#
#
plot(nx, bs/nx, col="white", ylab="",#
     xlab=expression(Total~investment~(italic(nx))))#
lines(nx,bs/nx,col="black",lwd=2)#
mtext("F", at = -10, col = "black")#
#
plot(ns, dimsol2, col="white", ylim=c(0,1), xlim=c(0,100), #
     xlab="",ylab=expression(Investment~(italic(x))))#
lines(ns,dimsol3,col="black",lwd=2)#
mtext("G", at = -10, col = "black")#
mtext("attractor", col = "black", cex = .8)#
#
plot(ns,accsol2,col="white",ylim=c(0,1),xlim=c(0,100),xlab="",ylab="")#
lines(ns,accsol2,col="black",lwd=2,lty=2)#
mtext("H", at = -10, col = "black")#
mtext("repellor", col = "black", cex = .8)#
#
plot(ns,sigsol1[,1],col="white",ylim=c(0,1),xlim=c(0,100),xlab=expression(Group~size~(italic(n))),ylab="")#
lines(ns,sigsol2[,1],col="black",lwd=2,lty=2)#
lines(ns,sigsol2[,2],col="black",lwd=2,lty=1)#
mtext("I", at = -10, col = "black")#
mtext("attractor & repellor", col = "black", cex = .8)
install.packages("rtiff")
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 6, 3)#
par(mfrow = c(1, 3), las = 1, mar = c(4, 5, 2, 1), fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[3], bg = acols[3])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[3], bg = acols[3])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[3], bg = acols[3])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 6, 3)#
par(mfrow = c(1, 3), las = 1, mar = c(4, 5, 2, 1), fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 6, 2)#
par(mfrow = c(1, 3), las = 1, mar = c(4, 5, 2, 1), fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 6, 2.5)#
par(mfrow = c(1, 3), las = 1, mar = c(4, 5, 2, 1), fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 7, 2.5)#
par(mfrow = c(1, 3), las = 1, mar = c(4, 5, 2, 1), fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 7, 2.5)#
par(mfrow = c(1, 3), las = 1, mar = c(4, 5, 2, 1), fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
par(fg = "black")#
mtext("a.", 3, -3, T, 0)#
mtext("b.", 3, -3, T, 0.33)#
mtext("c.", 3, -3, T, 0.66)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 7, 2.5)#
par(mfrow = c(1, 3), las = 1, mar = c(4, 5, 2, 1), fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
par(fg = "black")#
mtext("a.", 3, 0, T, 0)#
mtext("b.", 3, 0, T, 0.33)#
mtext("c.", 3, 0, T, 0.66)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 7, 2.5)#
par(mfrow = c(1, 3), las = 1, mar = c(4, 5, 2, 1), fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
par(fg = "black")#
mtext("a.", 3, -1, T, 0)#
mtext("b.", 3, -1, T, 0.33)#
mtext("c.", 3, -1, T, 0.66)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 7, 2.5)#
par(mfrow = c(1, 3), las = 1, #
    mar = c(4, 5, 2, 1), oma = c(1, 1, 0, 0)#
    fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
par(fg = "black")#
mtext("a.", 3, -1, T, 0)#
mtext("b.", 3, -1, T, 0.33)#
mtext("c.", 3, -1, T, 0.66)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 7, 2.5)#
par(mfrow = c(1, 3), las = 1, #
    mar = c(4, 5, 2, 1), oma = c(1, 1, 0, 0),#
    fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
par(fg = "black")#
mtext("a.", 3, -1, T, 0)#
mtext("b.", 3, -1, T, 0.33)#
mtext("c.", 3, -1, T, 0.66)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 7, 2.5)#
par(mfrow = c(1, 3), las = 1, #
    mar = c(4, 5, 2, 1), oma = c(1, 2, 0, 0),#
    fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
par(fg = "black")#
mtext("a.", 3, -1, T, 0)#
mtext("b.", 3, -1, T, 0.33)#
mtext("c.", 3, -1, T, 0.66)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 7, 2.5)#
par(mfrow = c(1, 3), las = 1, #
    mar = c(4, 5, 2, 1), oma = c(0, , 2, 0),#
    fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
par(fg = "black")#
mtext("a.", 3, -1, T, 0)#
mtext("b.", 3, -1, T, 0.33)#
mtext("c.", 3, -1, T, 0.66)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 7, 2.5)#
par(mfrow = c(1, 3), las = 1, #
    mar = c(4, 5, 2, 1), oma = c(0, 0, 2, 0),#
    fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
par(fg = "black")#
mtext("a.", 3, -1, T, 0)#
mtext("b.", 3, -1, T, 0.33)#
mtext("c.", 3, -1, T, 0.66)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 7, 2.5)#
par(mfrow = c(1, 3), las = 1, #
    mar = c(4, 5, 2, 1), oma = c(2, 0, 2, 0),#
    fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
par(fg = "black")#
mtext("a.", 3, -1, T, 0)#
mtext("b.", 3, -1, T, 0.33)#
mtext("c.", 3, -1, T, 0.66)
### All population data from the add signal evolution experiment#
#
rm(list = ls())#
#
dd <- read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/AddSignalEvo_PopnSummary.csv")#
dd$ecr <- dd$ecr_od405 / dd$ecr_od600#
these <- which(dd$evo_treat == "na" & dd$sig_treat == "sig")#
dd <- dd[-these,]#
#
nsig <- subset(dd, sig_treat == "na" & control == "n")#
sig <- subset(dd, sig_treat == "sig" & evo_treat == "sig", control = "n")#
controls <- subset(dd, control != "n" & sig_treat == "na")#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
options(scipen = -2)#
quartz("", 7, 2.5)#
par(mfrow = c(1, 3), las = 1, #
    mar = c(4, 5, 2, 1), oma = c(0, 2, 2, 0),#
    fg = grey(0.5))#
#
# panel 1#
plot(qsm_od ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$qsm_od, na.rm = T),#
     xlim = c(0.75, 2.25), #
     xlab = "", xaxt = "n", #
     ylab = expression(paste("Growth in QSM (", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$qsm_od, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$qsm_od[controls$control == "wt"], lty = 3)#
abline(h = controls$qsm_od[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 2#
par(mgp = c(4, 1, 0))#
plot(rlu ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$rlu, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste(italic(lasI), "expression (RLU/", OD[600], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$rlu, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$rlu[controls$control == "wt"], lty = 3)#
abline(h = controls$rlu[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
# panel 3#
par(mgp = c(3, 1, 0))#
plot(ecr ~ jitter(as.numeric(evo_treat), 0.5), nsig, #
     ylim = range(dd$ecr, na.rm = T),#
     xlim = c(0.75, 2.25),#
     xaxt = "n", xlab = "",#
     ylab = expression(paste("Protease production (", OD[600], "/", OD[495], ")")),#
     pch = 21, col = cols[3])#
points(jitter(rep(2, 5), 0.4), sig$ecr, pch = 21, col = cols[1], bg = acols[1])#
abline(h = controls$ecr[controls$control == "wt"], lty = 3)#
abline(h = controls$ecr[controls$control == "lasIR"])#
axis(1, 1:2, c("Control\nLines", "Signal Addition\nLines"), padj = 0.5)#
#
par(fg = "black")#
mtext("a.", 3, -1, T, 0)#
mtext("b.", 3, -1, T, 0.33)#
mtext("c.", 3, -1, T, 0.66)
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
str(dd)#
#
# try death and fluid with poisson errors.#
#
gm1<-glm(cbind(death, 30-death) ~ treat3, "binomial", data = dd)#
summary(gm1)#
#
gm2<-glm(cbind(fluid, 30-fluid) ~ treat3, "binomial", data = dd)#
summary(gm2)#
#
par(mfrow = c(2, 2))#
plot(gm1)#
plot(gm2)#
# great these are better models, now try with block as a random effect#
#
glmm1 <- lmer(cbind(death, 30-death) ~ treat3 + (treat3|block), dd, binomial)#
summary(glmm1)#
#
glmm2 <- lmer(cbind(fluid, 30-fluid) ~ treat3 + (treat3|block), dd, binomial)#
summary(glmm2)#
#
ranef(glmm1)#
ranef(glmm2)#
# now plot them in a way that shows the blocking design#
#
par(bty = "n", mfrow = c(1, 2),#
    oma = c(2, 2, 2, 2), mar = c(2, 4, 1, 1), ps = 9, cex = 0.9)#
#
plot(death ~ treat3, data = dd, type = "n", #
     xaxt = "n", yaxt = "n", xlab = "", ylab = "Death",#
     ylim = c(0, 10))#
#
for (i in 1:5){#
	lines(death ~ treat3, data = subset(dd, block == i), col = "grey")#
	points(death ~ treat3, data = subset(dd, block == i))#
}#
axis(1, c(1, 2, 3), c("High", "Mid", "Low"))#
axis(2, las = 2)#
mtext("a", adj = 0, cex = 1.2)#
#
#mtext(expression(paste(H[0], ": Relatedness grad = 0")), 3, 3)#
#mtext("z = -2.182, p = 0.02910 *", 3, 2)#
#
plot(fluid ~ treat3, data = dd, type = "n", #
     xaxt = "n", yaxt = "n", xlab = "", ylab = "Fluid Response",#
     ylim = c(0, 20))#
#
for (i in 1:5){#
	lines(fluid ~ treat3, data = subset(dd, block == i), col = "grey")#
	points(fluid ~ treat3, data = subset(dd, block == i))#
}#
axis(1, c(1, 2, 3), c("High", "Mid", "Low"))#
axis(2, las = 2)#
mtext("b", adj = 0, cex = 1.2)#
#
#mtext(expression(paste(H[0], ": Relatedness grad = 0")), 3, 3)#
#mtext("z = -2.739, p = 0.00616 **", 3, 2)#
#
mtext("Relatedness", 1, line = 1, outer = T)#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
quartz(".", 8, 4)#
par(mfrow = c(1, 2), las = 1)#
plot(death/20 ~ treat2, dd2, boxwex = 0.5, xlab = "", ylim = c(0, 0.5),#
     ylab = "Death")#
plot(fluid/20 ~ treat2, dd2, boxwex = 0.5, xlab = "", ylim = c(0, 1),#
     ylab = "Haemolymph Response")#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
quartz(".", 8, 4)#
par(mfrow = c(1, 2), las = 1)#
plot(death/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), dmeans$death/20, c(1.1, 2.1, 3.1), dmeans$death/20)#
axis(1, 1:3, c("High", "Mid", "Low"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("High", "Mid", "Low"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
quartz(".", 8, 4)#
par(mfrow = c(1, 2), las = 1)#
plot(death/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), dmeans$death/20, c(1.1, 2.1, 3.1), dmeans$death/20)#
axis(1, 1:3, c("High", "Mid", "Low"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("High", "Mid", "Low"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
#
quartz(".", 8, 4)#
par(mfrow = c(1, 2), las = 1)#
plot(death/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), dmeans$death/20, c(1.1, 2.1, 3.1), dmeans$death/20)#
axis(1, 1:3, c("High", "Mid", "Low"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("High", "Mid", "Low"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), dmeans$death/20, c(1.1, 2.1, 3.1), dmeans$death/20)#
axis(1, 1:3, c("High", "Mid", "Low"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("High", "Mid", "Low"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), dmeans$death/20, c(1.1, 2.1, 3.1), dmeans$death/20)#
axis(1, 1:3, c("High", "Mid", "Low"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("High", "Mid", "Low"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), c(1.1, 2.1, 3.1), rev(dmeans$death/20))#
axis(1, 1:3, c("High", "Mid", "Low"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("High", "Mid", "Low"))
dd2
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ 1:3, 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$death[dd2$treat2 == rev(levels(dd2$treat2))[i]],#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), c(1.1, 2.1, 3.1), rev(dmeans$death/20))#
axis(1, 1:3, c("low R", "mid R", "high R"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("low R", "mid R", "high R"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ 1:3, dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$death[dd2$treat2 == rev(levels(dd2$treat2))[i]],#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), c(1.1, 2.1, 3.1), rev(dmeans$death/20))#
axis(1, 1:3, c("low R", "mid R", "high R"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("low R", "mid R", "high R"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(1:3, death/20, dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$death[dd2$treat2 == rev(levels(dd2$treat2))[i]],#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), c(1.1, 2.1, 3.1), rev(dmeans$death/20))#
axis(1, 1:3, c("low R", "mid R", "high R"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("low R", "mid R", "high R"))
dd2
plot(1:3, death/20, dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")
dd2
plot(1:3, dd2$death/20, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(rep(1:3, 5), dd2$death/20, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$death[dd2$treat2 == rev(levels(dd2$treat2))[i]],#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), c(1.1, 2.1, 3.1), rev(dmeans$death/20))#
axis(1, 1:3, c("low R", "mid R", "high R"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("low R", "mid R", "high R"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "")#
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), c(1.1, 2.1, 3.1), rev(dmeans$death/20))#
axis(1, 1:3, c("low R", "mid R", "high R"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("low R", "mid R", "high R"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dpmeans$value[dpmeans$treat2 == rev(levels(dpmeans$treat2))[i]],#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), c(1.1, 2.1, 3.1), rev(dmeans$death/20))#
axis(1, 1:3, c("low R", "mid R", "high R"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("low R", "mid R", "high R"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$death[dd2$treat2 == rev(levels(dd2$treat2))[i]],#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), c(1.1, 2.1, 3.1), rev(dmeans$death/20))#
axis(1, 1:3, c("low R", "mid R", "high R"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("low R", "mid R", "high R"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$death/20[dd2$treat2 == rev(levels(dd2$treat2))[i]],#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), c(1.1, 2.1, 3.1), rev(dmeans$death/20))#
axis(1, 1:3, c("low R", "mid R", "high R"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("low R", "mid R", "high R"))
dd2$death/20[dd2$treat2 == rev(levels(dd2$treat2))[i]]
dd2$treat2
rev(levels(dd2$treat2))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$death[dd2$treat2 == rev(levels(dd2$treat2))[i]]/20,#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), c(1.1, 2.1, 3.1), rev(dmeans$death/20))#
axis(1, 1:3, c("low R", "mid R", "high R"))#
plot(fluid/20 ~ jitter(as.numeric(treat2), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n")#
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, c(1.1, 2.1, 3.1), fmeans$fluid/20)#
axis(1, 1:3, c("low R", "mid R", "high R"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$death[dd2$treat2 == rev(levels(dd2$treat2))[i]]/20,#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), #
         c(1.1, 2.1, 3.1), rev(dmeans$death/20),#
         col = cols)#
axis(1, 1:3, c("low R", "mid R", "high R"))#
#
plot(fluid/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$fluid[dd2$treat2 == rev(levels(dd2$treat2))[i]]/20,#
	       pch = 21, col = cols[i], bg = acols[i])#
}   #
segments(c(0.9, 1.9, 2.9), fmeans$fluid/20, #
        c(1.1, 2.1, 3.1), fmeans$fluid/20,#
        col = cols)#
axis(1, 1:3, c("low R", "mid R", "high R"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$death[dd2$treat2 == rev(levels(dd2$treat2))[i]]/20,#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), #
         c(1.1, 2.1, 3.1), rev(dmeans$death/20),#
         col = cols)#
axis(1, 1:3, c("low R", "mid R", "high R"))#
#
plot(fluid/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$fluid[dd2$treat2 == rev(levels(dd2$treat2))[i]]/20,#
	       pch = 21, col = cols[i], bg = acols[i])#
}   #
segments(c(0.9, 1.9, 2.9), rev(fmeans$fluid/20), #
        c(1.1, 2.1, 3.1), rev(fmeans$fluid/20),#
        col = cols)#
axis(1, 1:3, c("low R", "mid R", "high R"))
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$death[dd2$treat2 == rev(levels(dd2$treat2))[i]]/20,#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), #
         c(1.1, 2.1, 3.1), rev(dmeans$death/20),#
         col = cols)#
axis(1, 1:3, c("low R", "mid R", "high R"))#
#
plot(fluid/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$fluid[dd2$treat2 == rev(levels(dd2$treat2))[i]]/20,#
	       pch = 21, col = cols[i], bg = acols[i])#
}   #
segments(c(0.9, 1.9, 2.9), rev(fmeans$fluid/20), #
        c(1.1, 2.1, 3.1), rev(fmeans$fluid/20),#
        col = cols)#
axis(1, 1:3, c("low R", "mid R", "high R"))#
#
par(fg = "black")#
mtext("a.", 3, -3, T, 0)#
mtext("b.", 3, -3, T, 0.5)
##
# Relative fitness w/signal#
##
#
rm(list = ls())#
#
relfit<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/PA01vslasIRCTXlux_signal_quencher.csv")#
#
relf <- subset(relfit, treatment != "Quencher")#
relf$treatment <- factor(relf$treatment, c("No Addition", "Signal"))#
#
##
# relatedness and responsiveness#
##
#
# new data set for the responsiveness figure#
resp<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/gps123_responsiveness.csv")#
library(reshape2)#
respm<-melt(resp, 1:3)#
#
dp<-subset(respm, treat!="control" & measure=="Diff")#
dp$treat2<-factor(dp$treat, levels=c("High R", "Mid R", "Low R"))#
#
dpmeans<-aggregate(value ~ variable + treat2, data = dp, mean)#
dpmeans$treat2<-factor(dpmeans$treat, levels=c("High R", "Mid R", "Low R"))#
#
#  plot#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(1, 3, 5)]#
acols <- paste(cols, "50", sep = "")#
#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(mean ~ jitter(as.numeric(treatment), 0.5), relf,#
               ylab = "Mutant Relative Fitness", xlab = "",#
               ylim= c (1,5), xlim = c(0.75, 2.25),#
               xaxt = "n", pch = 21, col = cols[3], bg = acols[3])#
axis(1, 1:2, c("No Addition", "Signal"))#
segments(0.8, mean(relf$mean[relf$treatment == "No Addition"]),#
         1.2, mean(relf$mean[relf$treatment == "No Addition"]), col = cols[3])#
segments(1.8, mean(relf$mean[relf$treatment == "Signal"]),#
         2.2, mean(relf$mean[relf$treatment == "Signal"]), col = cols[3])#
plot(value ~ jitter(as.numeric(rev(treat2)), 0.5), dpmeans, #
     xlab = "", ylab = "Responsiveness", xaxt = "n",#
     type = "n", xlim = c(0.75, 3.25))#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dpmeans$value[dpmeans$treat2 == rev(levels(dpmeans$treat2))[i]],#
	       pch = 21, col = cols[i], bg = acols[i])#
}#
#
respmeans<-tapply(dpmeans$value, rev(dpmeans$treat2), mean)#
segments(1:3-0.2, respmeans, 1:3+0.2, respmeans, col = cols)#
axis(2, las = 2)#
axis(1, 1:3, c("low R", "mid R", "high R"))#
#
par(fg = "black")#
mtext("a.", 3, -3, T, 0)#
mtext("b.", 3, -3, T, 0.5)
##
# Relative fitness w/signal#
##
#
rm(list = ls())#
#
relfit<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/PA01vslasIRCTXlux_signal_quencher.csv")#
#
relf <- subset(relfit, treatment != "Quencher")#
relf$treatment <- factor(relf$treatment, c("No Addition", "Signal"))#
#
##
# relatedness and responsiveness#
##
#
# new data set for the responsiveness figure#
resp<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/gps123_responsiveness.csv")#
library(reshape2)#
respm<-melt(resp, 1:3)#
#
dp<-subset(respm, treat!="control" & measure=="Diff")#
dp$treat2<-factor(dp$treat, levels=c("High R", "Mid R", "Low R"))#
#
dpmeans<-aggregate(value ~ variable + treat2, data = dp, mean)#
dpmeans$treat2<-factor(dpmeans$treat, levels=c("High R", "Mid R", "Low R"))#
#
#  plot#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(5, 1, 3)]#
acols <- paste(cols, "50", sep = "")#
#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(mean ~ jitter(as.numeric(treatment), 0.5), relf,#
               ylab = "Mutant Relative Fitness", xlab = "",#
               ylim= c (1,5), xlim = c(0.75, 2.25),#
               xaxt = "n", pch = 21, col = cols[3], bg = acols[3])#
axis(1, 1:2, c("No Addition", "Signal"))#
segments(0.8, mean(relf$mean[relf$treatment == "No Addition"]),#
         1.2, mean(relf$mean[relf$treatment == "No Addition"]), col = cols[3])#
segments(1.8, mean(relf$mean[relf$treatment == "Signal"]),#
         2.2, mean(relf$mean[relf$treatment == "Signal"]), col = cols[3])#
plot(value ~ jitter(as.numeric(rev(treat2)), 0.5), dpmeans, #
     xlab = "", ylab = "Responsiveness", xaxt = "n",#
     type = "n", xlim = c(0.75, 3.25))#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dpmeans$value[dpmeans$treat2 == rev(levels(dpmeans$treat2))[i]],#
	       pch = 21, col = cols[i], bg = acols[i])#
}#
#
respmeans<-tapply(dpmeans$value, rev(dpmeans$treat2), mean)#
segments(1:3-0.2, respmeans, 1:3+0.2, respmeans, col = cols)#
axis(2, las = 2)#
axis(1, 1:3, c("low R", "mid R", "high R"))#
#
par(fg = "black")#
mtext("a.", 3, -3, T, 0)#
mtext("b.", 3, -3, T, 0.5)
##
# Relative fitness w/signal#
##
#
rm(list = ls())#
#
relfit<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/PA01vslasIRCTXlux_signal_quencher.csv")#
#
relf <- subset(relfit, treatment != "Quencher")#
relf$treatment <- factor(relf$treatment, c("No Addition", "Signal"))#
#
##
# relatedness and responsiveness#
##
#
# new data set for the responsiveness figure#
resp<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/gps123_responsiveness.csv")#
library(reshape2)#
respm<-melt(resp, 1:3)#
#
dp<-subset(respm, treat!="control" & measure=="Diff")#
dp$treat2<-factor(dp$treat, levels=c("High R", "Mid R", "Low R"))#
#
dpmeans<-aggregate(value ~ variable + treat2, data = dp, mean)#
dpmeans$treat2<-factor(dpmeans$treat, levels=c("High R", "Mid R", "Low R"))#
#
#  plot#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(5, 1, 3)]#
acols <- paste(cols, "50", sep = "")#
#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(mean ~ jitter(as.numeric(treatment), 0.5), relf,#
               ylab = "Mutant Relative Fitness", xlab = "",#
               ylim= c (1,5), xlim = c(0.75, 2.25),#
               xaxt = "n", pch = 21, col = cols[1], bg = acols[1])#
axis(1, 1:2, c("No Addition", "Signal"))#
segments(0.8, mean(relf$mean[relf$treatment == "No Addition"]),#
         1.2, mean(relf$mean[relf$treatment == "No Addition"]), col = cols[1])#
segments(1.8, mean(relf$mean[relf$treatment == "Signal"]),#
         2.2, mean(relf$mean[relf$treatment == "Signal"]), col = cols[1])#
plot(value ~ jitter(as.numeric(rev(treat2)), 0.5), dpmeans, #
     xlab = "", ylab = "Responsiveness", xaxt = "n",#
     type = "n", xlim = c(0.75, 3.25))#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dpmeans$value[dpmeans$treat2 == rev(levels(dpmeans$treat2))[i]],#
	       pch = 21, col = cols[i], bg = acols[i])#
}#
#
respmeans<-tapply(dpmeans$value, rev(dpmeans$treat2), mean)#
segments(1:3-0.2, respmeans, 1:3+0.2, respmeans, col = cols)#
axis(2, las = 2)#
axis(1, 1:3, c("low R", "mid R", "high R"))#
#
par(fg = "black")#
mtext("a.", 3, -3, T, 0)#
mtext("b.", 3, -3, T, 0.5)
##
# Relative fitness w/signal#
##
#
rm(list = ls())#
#
relfit<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/PA01vslasIRCTXlux_signal_quencher.csv")#
#
relf <- subset(relfit, treatment != "Quencher")#
relf$treatment <- factor(relf$treatment, c("No Addition", "Signal"))#
#
##
# relatedness and responsiveness#
##
#
# new data set for the responsiveness figure#
resp<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Analyses/gps123_responsiveness.csv")#
library(reshape2)#
respm<-melt(resp, 1:3)#
#
dp<-subset(respm, treat!="control" & measure=="Diff")#
dp$treat2<-factor(dp$treat, levels=c("High R", "Mid R", "Low R"))#
#
dpmeans<-aggregate(value ~ variable + treat2, data = dp, mean)#
dpmeans$treat2<-factor(dpmeans$treat, levels=c("High R", "Mid R", "Low R"))#
#
#  plot#
#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(5, 3, 1)]#
acols <- paste(cols, "50", sep = "")#
#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(mean ~ jitter(as.numeric(treatment), 0.5), relf,#
               ylab = "Mutant Relative Fitness", xlab = "",#
               ylim= c (1,5), xlim = c(0.75, 2.25),#
               xaxt = "n", pch = 21, col = cols[1], bg = acols[1])#
axis(1, 1:2, c("No Addition", "Signal"))#
segments(0.8, mean(relf$mean[relf$treatment == "No Addition"]),#
         1.2, mean(relf$mean[relf$treatment == "No Addition"]), col = cols[1])#
segments(1.8, mean(relf$mean[relf$treatment == "Signal"]),#
         2.2, mean(relf$mean[relf$treatment == "Signal"]), col = cols[1])#
plot(value ~ jitter(as.numeric(rev(treat2)), 0.5), dpmeans, #
     xlab = "", ylab = "Responsiveness", xaxt = "n",#
     type = "n", xlim = c(0.75, 3.25))#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dpmeans$value[dpmeans$treat2 == rev(levels(dpmeans$treat2))[i]],#
	       pch = 21, col = cols[i], bg = acols[i])#
}#
#
respmeans<-tapply(dpmeans$value, rev(dpmeans$treat2), mean)#
segments(1:3-0.2, respmeans, 1:3+0.2, respmeans, col = cols)#
axis(2, las = 2)#
axis(1, 1:3, c("low R", "mid R", "high R"))#
#
par(fg = "black")#
mtext("a.", 3, -3, T, 0)#
mtext("b.", 3, -3, T, 0.5)
#                                                                     ##
# Galleria virulence assays by eric p, for the signal evolution paper ##
#                                                                     ##
rm(list = ls())#
#
library(lme4)#
#
vir<-read.csv("~/Box Sync/Manuscripts/Signal Evolution/Eric Virulence/sigevo_virulence_raw.csv")#
str(vir)#
# remove LB control#
vir<-subset(vir, treat != "LB")#
# subset and sort factors#
#
dd<-subset(vir, block != "c")#
dd$treat2<-factor(dd$treat, labels = c("High", "Low", "Mid"))#
dd$treat2<-factor(dd$treat2, c("High", "Mid", "Low"))#
dd$treat3 <- as.numeric(dd$treat2)#
#
# and a more simple plot (steve's talk)#
dd2 <- droplevels(subset(dd, treat != "lasR" & treat != "WT"))#
#
dmeans <- aggregate(death ~ treat2, dd2, mean)#
fmeans <- aggregate(fluid ~ treat2, dd2, mean)#
library(wesanderson)#
cols <- wes.palette(5, "Zissou")[c(5, 3, 1)]#
acols <- paste(cols, "50", sep = "")#
quartz(".", 7, 4)#
par(mfrow = c(1, 2), las = 1, fg = grey(0.5), pch = 21, oma = c(1, 1, 1, 1))#
plot(death/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 0.5), xlim = c(0.8, 3.2),#
     ylab = "Death", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$death[dd2$treat2 == rev(levels(dd2$treat2))[i]]/20,#
	       pch = 21, col = cols[i], bg = acols[i])#
}     #
segments(c(0.9, 1.9, 2.9), rev(dmeans$death/20), #
         c(1.1, 2.1, 3.1), rev(dmeans$death/20),#
         col = cols)#
axis(1, 1:3, c("low R", "mid R", "high R"))#
#
plot(fluid/20 ~ jitter(as.numeric(rev(treat2)), 0.5), dd2, xlab = "", #
     ylim = c(0, 1), xlim = c(0.8, 3.2),#
     ylab = "Haemolymph Response", xaxt = "n", type = "n")#
for(i in 1:3){#
	points(jitter(rep(i, 5), 2), #
	       dd2$fluid[dd2$treat2 == rev(levels(dd2$treat2))[i]]/20,#
	       pch = 21, col = cols[i], bg = acols[i])#
}   #
segments(c(0.9, 1.9, 2.9), rev(fmeans$fluid/20), #
        c(1.1, 2.1, 3.1), rev(fmeans$fluid/20),#
        col = cols)#
axis(1, 1:3, c("low R", "mid R", "high R"))#
#
par(fg = "black")#
mtext("a.", 3, -3, T, 0)#
mtext("b.", 3, -3, T, 0.5)
ls()
### R code from vignette source 'vignettes/EBImage/inst/doc/EBImage-introduction.Rnw'#
#
####################################################
### code chunk number 1: style#
####################################################
BiocStyle::latex()#
####################################################
### code chunk number 2: library#
####################################################
library("EBImage")
install.packages("BiocStyle")
source("http://bioconductor.org/biocLite.R")#
biocLite(BiocStyke)
source("http://bioconductor.org/biocLite.R")#
biocLite(BiocStyle)
source("http://bioconductor.org/biocLite.R")#
biocLite("BiocStyle")
### R code from vignette source 'vignettes/EBImage/inst/doc/EBImage-introduction.Rnw'#
#
####################################################
### code chunk number 1: style#
####################################################
BiocStyle::latex()#
####################################################
### code chunk number 2: library#
####################################################
library("EBImage")
source("http://bioconductor.org/biocLite.R")#
biocLite("EBImage")
### R code from vignette source 'vignettes/EBImage/inst/doc/EBImage-introduction.Rnw'#
#
####################################################
### code chunk number 1: style#
####################################################
BiocStyle::latex()#
####################################################
### code chunk number 2: library#
####################################################
library("EBImage")
display = function(...) if (interactive()) EBImage::display(...)
f = system.file("images", "sample.png", package="EBImage")
img = readImage(f)
f
display <- function(...) if (interactive()) EBImage::display(...)
ls()
f
displat
display
?system.file
f = system.file("images/sample.png", package="EBImage")
f
f = system.file("images\sample.png", package="EBImage")
f = system.file("images/sample.png", package="EBImage")
f <- system.file("images/sample.png", package="EBImage")
f
f <- system.file("images", "sample.png", package="EBImage")
f
### R code from vignette source 'vignettes/EBImage/inst/doc/EBImage-introduction.Rnw'#
#
####################################################
### code chunk number 1: style#
####################################################
BiocStyle::latex()#
####################################################
### code chunk number 2: library#
####################################################
library("EBImage")#
####################################################
### code chunk number 3: display-hack#
####################################################
display <- function(...) if (interactive()) EBImage::display(...)#
####################################################
### code chunk number 4: readImage1#
####################################################
f <- system.file("images", "sample.png", package="EBImage")#
img = readImage(f)
?system.file
f <- system.file("images", package="EBImage")
f
?quartz
?dev
?dev.new
?quartz
df1 <- data.frame(CustomerId=c(1:6),Product=c(rep("Toaster",3),rep("Radio",3)))
df2 <- data.frame(CustomerId=c(2,4,6),State=c(rep("Alabama",2),rep("Ohio",1)))
df1
df2
merge(df1, df2)
?merge
merge(x = df1, y = df2, by = "CustomerId", all = TRUE)
merge(x = df1, y = df2, by = "CustomerId", all.x=TRUE)
merge(x = df1, y = df2, by = "CustomerId", all.y=TRUE)
merge(x = df1, y = df2, by = NULL)
rm(list = ls())
library(EBImage)
##
# EBImage example#
##
#
rm(list = ls())#
library(EBImage)#
#
nuc = readImage(system.file('images','nuclei.tif', package='EBImage'))#
cel = readImage(system.file('images','cells.tif', package='EBImage'))#
img = rgbImage(green=1.5*cel, blue=nuc)
display(img)
display(nuc)
img <- readImage("wt abscess #1.1/wt abscess #1.1 mask_007.tif")
setwd("/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/")
img <- readImage("wt abscess #1.1/wt abscess #1.1 mask_007.tif")
setwd("~/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/")
img <- readImage("wt abscess #1.1/wt abscess #1.1 mask_007.tif")
display(img)
colonyLabel <- bwlabel(img)
colonyLabel
display(img/max(colonyLabel))
display(colonyLabel/max(colonyLabel))
cat('Number of objects=', max(colonyLabel),'\n')
img2 =  thresh(img[,,1], w=10, h=10, offset=0.05)
img2 =  thresh(img, w=10, h=10, offset=0.05)
kern = makeBrush(5, shape='disc')
img2 = dilate(erode(img2, kern), kern)
# thresholding#
img2 =  thresh(img, w=10, h=10, offset=0.05)#
kern = makeBrush(5, shape='disc')#
img2 = dilate(erode(img2, kern), kern)#
colonyLabel2 = bwlabel(img2)#
cat('Number of nuclei=', max(nuclabel2),'\n')
cat('Number of nuclei=', max(colonyLabel2),'\n')
cat('Number of objects=', max(colonyLabel2),'\n')
display(img2)
# thresholding#
img2 =  thresh(img, w=10, h=10, offset=0.05)#
kern = makeBrush(1, shape='disc')#
img2 = dilate(erode(img2, kern), kern)#
colonyLabel2 = bwlabel(img2)#
cat('Number of objects=', max(colonyLabel2),'\n')#
display(img2)
img2 =  thresh(img, w=10, h=10, offset=0.05)#
kern = makeBrush(2, shape='disc')#
img2 = dilate(erode(img2, kern), kern)#
colonyLabel2 = bwlabel(img2)#
cat('Number of objects=', max(colonyLabel2),'\n')#
display(img2)
# thresholding#
img2 =  thresh(img, w=10, h=10, offset=0.05)#
kern = makeBrush(2, shape='guassian')#
img2 = dilate(erode(img2, kern), kern)#
colonyLabel2 = bwlabel(img2)#
cat('Number of objects=', max(colonyLabel2),'\n')#
display(img2)
##
# EBImage example#
##
#
rm(list = ls())#
library(EBImage)#
#
setwd("~/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/")#
img <- readImage("wt abscess #1.1/wt abscess #1.1 mask_007.tif")#
#
# display raw image#
display(img)#
#
# identify number of objects (same intensity value neighbours)#
colonyLabel <- bwlabel(img)#
cat('Number of objects=', max(colonyLabel),'\n')#
display(colonyLabel/max(colonyLabel))#
#
# writeImage(colonyLabel/max(colonyLabel), 'colonyLabel.png')#
#
# thresholding#
img2 <- thresh(img, w=10, h=10, offset=0.05)#
kern <- makeBrush(2, shape='guassian')#
img2 <- dilate(erode(img2, kern), kern)#
colonyLabel2 <- bwlabel(img2)#
cat('Number of objects=', max(colonyLabel2),'\n')#
display(img2)#
# writeImage(colonyLabel2/max(colonyLabel2), 'colonyLabel2.png')#
imggray <- channel(img, 'rgb')#
img1 <- paintObjects(colonyLabel2, imggray, col='#ff00ff')#
colonyLabel3 <- fillHull(colonyLabel2)#
imgh2 <- paintObjects(colonyLabel3, nucgray, col='#ff00ff')
##
# EBImage example#
##
#
rm(list = ls())#
library(EBImage)#
#
setwd("~/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/")#
img <- readImage("wt abscess #1.1/wt abscess #1.1 mask_007.tif")#
#
# display raw image#
display(img)#
#
# identify number of objects (same intensity value neighbours)#
colonyLabel <- bwlabel(img)#
cat('Number of objects=', max(colonyLabel),'\n')#
display(colonyLabel/max(colonyLabel))#
#
# writeImage(colonyLabel/max(colonyLabel), 'colonyLabel.png')#
#
# thresholding#
img2 <- thresh(img, w=10, h=10, offset=0.05)#
kern <- makeBrush(2, shape='guassian')#
img2 <- dilate(erode(img2, kern), kern)#
colonyLabel2 <- bwlabel(img2)#
cat('Number of objects=', max(colonyLabel2),'\n')#
display(img2)#
# writeImage(colonyLabel2/max(colonyLabel2), 'colonyLabel2.png')#
imggray <- channel(img, 'rgb')#
img3 <- paintObjects(colonyLabel2, imggray, col='#ff00ff')#
colonyLabel3 <- fillHull(colonyLabel2)#
imgh2 <- paintObjects(colonyLabel3, nucgray, col='#ff00ff')#
display
display(img3)
display(imgh2)
imgh2 <- paintObjects(colonyLabel3, imggray, col='#ff00ff')
display(imgh2)
imgh2
str(imgh2)
xy <- computeFeatures.moment(colonyLabel3)[, c("m.cx", "m.cy")]
head(xy)
?computeFeatures
xy
shapes <- computeFeatures.shape(colonyLabel3)[, c("area", "perim", "radius")]
shapes <- computeFeatures.shape(colonyLabel3)
shapes
head(shapes)
cbind(xy, shapes)
results <- cbind(xy, shapes)
head(results)
hist(results$s.area)
str(results)
results <- data.frame(cbind(xy, shapes))
hist(results$s.area)
hist(log(results$s.area)
hist(log(results$s.area))
hist(log(results$s.area > 3))
hist(log(results$s.area > 1))
hist(log(results$s.area > 5))
hist(log(results$s.area[results$s.area > 1]))
hist(log(results$s.area[results$s.area > 2]))
hist(log(results$s.area[results$s.area > 3]))
hist((results$s.area[results$s.area > 3]))
hist(log(results$s.area[results$s.area > 3]))
hist(log(results$s.area[results$s.area > 3]), breaks = 50)
hist(log(results$s.area[results$s.area > 3]), #
     breaks = 50, main = "", xlab = "log(area)")
hist(log10(results$s.area[results$s.area > 3]), #
     breaks = 50, main = "", xlab = "log(area)")
hist(log10(results$s.area[results$s.area > 1]), #
     breaks = 50, main = "", xlab = "log(area)")
hist(log10(results$s.area[results$s.area > 5]), #
     breaks = 50, main = "", xlab = "log(area)")
hist(log10(results$s.area[results$s.radius.mean > 5]), #
     breaks = 50, main = "", xlab = "log10(area)")
par(mfrow = c(1, 3))#
#
hist(log10(results$s.area[results$s.area > 5]), #
     breaks = 50, main = "", xlab = "log10(area)")#
#
hist(log10(results$s.area[results$s.perimeter > 5]), #
     breaks = 50, main = "", xlab = "log10(radius)")#
#
hist(log10(results$s.area[results$s.radius.mean > 5]), #
     breaks = 50, main = "", xlab = "log10(radius)")
par(mfrow = c(1, 3), bty = "o")#
#
hist(log10(results$s.area[results$s.area > 5]), #
     breaks = 50, main = "", xlab = "log10(area)")#
#
hist(log10(results$s.area[results$s.perimeter > 5]), #
     breaks = 50, main = "", xlab = "log10(radius)")#
#
hist(log10(results$s.area[results$s.radius.mean > 5]), #
     breaks = 50, main = "", xlab = "log10(radius)")
quartz("", 9, 3)#
par(mfrow = c(1, 3))#
#
hist(log10(results$s.area[results$s.area > 5]), #
     breaks = 50, main = "", xlab = "log10(area)")#
#
hist(log10(results$s.area[results$s.perimeter > 5]), #
     breaks = 50, main = "", xlab = "log10(radius)")#
#
hist(log10(results$s.area[results$s.radius.mean > 5]), #
     breaks = 50, main = "", xlab = "log10(radius)")
plot(log10(results$s.area[results$s.area > 5]) ~ log10(results$s.area[results$s.perimeter > 5]))
plot(log10(results$s.area) ~ log10(results$s.area))
plot(log10(s.area) ~ log10(s.perimeter), results)
##
# EBImage example#
##
#
rm(list = ls())#
library(EBImage)#
#
setwd("~/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/")#
img <- readImage("wt abscess #1.1/wt abscess #1.1 mask_007.tif")#
#
# display raw image#
display(img)#
#
# identify number of objects (same intensity value neighbours)#
colonyLabel <- bwlabel(img)#
cat('Number of objects=', max(colonyLabel),'\n')#
display(colonyLabel/max(colonyLabel))#
#
# writeImage(colonyLabel/max(colonyLabel), 'colonyLabel.png')#
#
# thresholding#
img2 <- thresh(img, w=10, h=10, offset=0.05)#
kern <- makeBrush(2, shape='guassian')#
img2 <- dilate(erode(img2, kern), kern)#
colonyLabel2 <- bwlabel(img2)#
cat('Number of objects=', max(colonyLabel2),'\n')#
display(img2)#
# writeImage(colonyLabel2/max(colonyLabel2), 'colonyLabel2.png')#
imggray <- channel(img, 'rgb')#
img3 <- paintObjects(colonyLabel2, imggray, col='#ff00ff')#
colonyLabel3 <- fillHull(colonyLabel2)#
imgh2 <- paintObjects(colonyLabel3, imggray, col='#ff00ff')#
#
display(img3)#
display(imgh2)#
#
xy <- computeFeatures.moment(colonyLabel3)[, c("x", "y")]#
shapes <- computeFeatures.shape(colonyLabel3)#
#
results <- data.frame(cbind(xy, shapes))#
quartz("", 9, 3)#
par(mfrow = c(1, 3))#
#
hist(log10(results$s.area[results$s.area > 5]), #
     breaks = 50, main = "", xlab = "log10(area)")#
#
hist(log10(results$s.area[results$s.perimeter > 5]), #
     breaks = 50, main = "", xlab = "log10(perimiter)")#
#
hist(log10(results$s.area[results$s.radius.mean > 5]), #
     breaks = 50, main = "", xlab = "log10(radius)")#
plot(log10(s.area) ~ log10(s.perimeter), results)
##
# EBImage example#
##
#
rm(list = ls())#
library(EBImage)#
#
setwd("~/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/")#
img <- readImage("wt abscess #1.1/wt abscess #1.1 mask_007.tif")#
#
# display raw image#
display(img)#
#
# identify number of objects (same intensity value neighbours)#
colonyLabel <- bwlabel(img)#
cat('Number of objects=', max(colonyLabel),'\n')#
display(colonyLabel/max(colonyLabel))#
#
# writeImage(colonyLabel/max(colonyLabel), 'colonyLabel.png')#
#
# thresholding#
img2 <- thresh(img, w=10, h=10, offset=0.05)#
kern <- makeBrush(2, shape='disc')#
img2 <- dilate(erode(img2, kern), kern)#
colonyLabel2 <- bwlabel(img2)#
cat('Number of objects=', max(colonyLabel2),'\n')#
display(img2)#
# writeImage(colonyLabel2/max(colonyLabel2), 'colonyLabel2.png')#
imggray <- channel(img, 'rgb')#
img3 <- paintObjects(colonyLabel2, imggray, col='#ff00ff')#
colonyLabel3 <- fillHull(colonyLabel2)#
imgh2 <- paintObjects(colonyLabel3, imggray, col='#ff00ff')#
#
display(img3)#
display(imgh2)#
#
xy <- computeFeatures.moment(colonyLabel3)[, c("x", "y")]#
shapes <- computeFeatures.shape(colonyLabel3)#
#
results <- data.frame(cbind(xy, shapes))#
quartz("", 9, 3)#
par(mfrow = c(1, 3))#
#
hist(log10(results$s.area[results$s.area > 5]), #
     breaks = 50, main = "", xlab = "log10(area)")#
#
hist(log10(results$s.area[results$s.perimeter > 5]), #
     breaks = 50, main = "", xlab = "log10(perimiter)")#
#
hist(log10(results$s.area[results$s.radius.mean > 5]), #
     breaks = 50, main = "", xlab = "log10(radius)")#
plot(log10(s.area) ~ log10(s.perimeter), results)
xy <- computeFeatures.moment(colonyLabel3)[, c("c.mx", "c.my")]
##
# EBImage example#
##
#
rm(list = ls())#
library(EBImage)#
#
setwd("~/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/")#
img <- readImage("wt abscess #1.1/wt abscess #1.1 mask_007.tif")#
#
# display raw image#
display(img)#
#
# identify number of objects (same intensity value neighbours)#
colonyLabel <- bwlabel(img)#
cat('Number of objects=', max(colonyLabel),'\n')#
# display(colonyLabel/max(colonyLabel))#
#
# writeImage(colonyLabel/max(colonyLabel), 'colonyLabel.png')#
#
# thresholding#
img2 <- thresh(img, w=10, h=10, offset=0.05)#
kern <- makeBrush(2, shape='guassian')#
img2 <- dilate(erode(img2, kern), kern)#
colonyLabel2 <- bwlabel(img2)#
cat('Number of objects=', max(colonyLabel2),'\n')#
# display(img2)#
# writeImage(colonyLabel2/max(colonyLabel2), 'colonyLabel2.png')#
imggray <- channel(img, 'rgb')#
img3 <- paintObjects(colonyLabel2, imggray, col='#ff00ff')#
colonyLabel3 <- fillHull(colonyLabel2)#
imgh2 <- paintObjects(colonyLabel3, imggray, col='#ff00ff')#
#
# display(img3)#
# display(imgh2)#
#
xy <- computeFeatures.moment(colonyLabel3)#
shapes <- computeFeatures.shape(colonyLabel3)
kern <- makeBrush(2, shape='disc')
##
# EBImage example#
##
#
rm(list = ls())#
library(EBImage)#
#
setwd("~/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/")#
img <- readImage("wt abscess #1.1/wt abscess #1.1 mask_007.tif")#
#
# display raw image#
# display(img)#
#
# identify number of objects (same intensity value neighbours)#
colonyLabel <- bwlabel(img)#
cat('Number of objects=', max(colonyLabel),'\n')#
# display(colonyLabel/max(colonyLabel))#
#
# writeImage(colonyLabel/max(colonyLabel), 'colonyLabel.png')#
#
# thresholding#
img2 <- thresh(img, w=10, h=10, offset=0.05)#
kern <- makeBrush(2, shape='disc')#
img2 <- dilate(erode(img2, kern), kern)#
colonyLabel2 <- bwlabel(img2)#
cat('Number of objects=', max(colonyLabel2),'\n')#
# display(img2)#
# writeImage(colonyLabel2/max(colonyLabel2), 'colonyLabel2.png')#
imggray <- channel(img, 'rgb')#
img3 <- paintObjects(colonyLabel2, imggray, col='#ff00ff')#
colonyLabel3 <- fillHull(colonyLabel2)#
imgh2 <- paintObjects(colonyLabel3, imggray, col='#ff00ff')#
#
# display(img3)#
# display(imgh2)#
#
xy <- computeFeatures.moment(colonyLabel3)#
shapes <- computeFeatures.shape(colonyLabel3)#
#
results <- data.frame(cbind(xy, shapes))
head(results)
quartz("", 9, 3)#
par(mfrow = c(1, 3))#
#
hist(log10(results$s.area[results$s.area > 5]), #
     breaks = 50, main = "", xlab = "log10(area)")#
#
hist(log10(results$s.area[results$s.perimeter > 5]), #
     breaks = 50, main = "", xlab = "log10(perimiter)")#
#
hist(log10(results$s.area[results$s.radius.mean > 5]), #
     breaks = 50, main = "", xlab = "log10(radius)")#
plot(log10(s.area) ~ log10(s.perimeter),)
plot(log10(s.area) ~ log10(s.perimeter), results)
quartz("", 12, 3)#
par(mfrow = c(1, 4))#
#
hist(log10(results$s.area[results$s.area > 5]), #
     breaks = 50, main = "", xlab = "log10(area)")#
#
hist(log10(results$s.area[results$s.perimeter > 5]), #
     breaks = 50, main = "", xlab = "log10(perimiter)")#
#
hist(log10(results$s.area[results$s.radius.mean > 5]), #
     breaks = 50, main = "", xlab = "log10(radius)")#
plot(log10(s.area) ~ log10(s.perimeter), results)
##
# EBImage example#
##
#
rm(list = ls())#
library(EBImage)#
#
setwd("~/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/")#
img <- readImage("wt abscess #1.1/wt abscess #1.1 mask_007.tif")#
#
# display raw image#
# display(img)#
#
# identify number of objects (same intensity value neighbours)#
colonyLabel <- bwlabel(img)#
cat('Number of objects=', max(colonyLabel),'\n')#
# display(colonyLabel/max(colonyLabel))#
#
# writeImage(colonyLabel/max(colonyLabel), 'colonyLabel.png')#
#
# thresholding#
img2 <- thresh(img, w=10, h=10, offset=0.05)#
kern <- makeBrush(3, shape='disc')#
img2 <- dilate(erode(img2, kern), kern)#
colonyLabel2 <- bwlabel(img2)#
cat('Number of objects=', max(colonyLabel2),'\n')#
# display(img2)#
# writeImage(colonyLabel2/max(colonyLabel2), 'colonyLabel2.png')#
imggray <- channel(img, 'rgb')#
img3 <- paintObjects(colonyLabel2, imggray, col='#ff00ff')#
colonyLabel3 <- fillHull(colonyLabel2)#
imgh2 <- paintObjects(colonyLabel3, imggray, col='#ff00ff')#
#
# display(img3)#
# display(imgh2)#
#
xy <- computeFeatures.moment(colonyLabel3)#
shapes <- computeFeatures.shape(colonyLabel3)#
#
results <- data.frame(cbind(xy, shapes))#
quartz("", 12, 3)#
par(mfrow = c(1, 4))#
#
hist(log10(results$s.area[results$s.area > 5]), #
     breaks = 50, main = "", xlab = "log10(area)")#
#
hist(log10(results$s.area[results$s.perimeter > 5]), #
     breaks = 50, main = "", xlab = "log10(perimiter)")#
#
hist(log10(results$s.area[results$s.radius.mean > 5]), #
     breaks = 50, main = "", xlab = "log10(radius)")#
plot((s.area) ~ (s.perimeter), results)
##
# EBImage example#
##
#
rm(list = ls())#
library(EBImage)#
#
setwd("~/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/")#
img <- readImage("wt abscess #1.1/wt abscess #1.1 mask_007.tif")#
#
# display raw image#
# display(img)#
#
# identify number of objects (same intensity value neighbours)#
colonyLabel <- bwlabel(img)#
cat('Number of objects=', max(colonyLabel),'\n')#
# display(colonyLabel/max(colonyLabel))#
#
# writeImage(colonyLabel/max(colonyLabel), 'colonyLabel.png')#
#
# thresholding#
img2 <- thresh(img, w=10, h=10, offset=0.05)#
kern <- makeBrush(3, shape='disc')#
img2 <- dilate(erode(img2, kern), kern)#
colonyLabel2 <- bwlabel(img2)#
cat('Number of objects=', max(colonyLabel2),'\n')#
# display(img2)#
# writeImage(colonyLabel2/max(colonyLabel2), 'colonyLabel2.png')#
imggray <- channel(img, 'rgb')#
img3 <- paintObjects(colonyLabel2, imggray, col='#ff00ff')#
colonyLabel3 <- fillHull(colonyLabel2)#
imgh2 <- paintObjects(colonyLabel3, imggray, col='#ff00ff')#
#
# display(img3)#
# display(imgh2)#
#
xy <- computeFeatures.moment(colonyLabel3)#
shapes <- computeFeatures.shape(colonyLabel3)#
#
results <- data.frame(cbind(xy, shapes))#
quartz("", 12, 3)#
par(mfrow = c(1, 4))#
#
hist(log10(results$s.area[results$s.area > 5]), #
     breaks = 50, main = "", xlab = "log10(area)")#
#
hist(log10(results$s.perimeter [results$s.perimeter > 5]), #
     breaks = 50, main = "", xlab = "log10(perimiter)")#
#
hist(log10(results$s.radius.mean[results$s.radius.mean > 2]), #
     breaks = 50, main = "", xlab = "log10(radius)")#
plot((s.area) ~ (s.perimeter), results)
load("/Users/roman/Box Sync/R/iMage001/data/wtAbscess/wtAbscess#1.1_Aa_thresholdedStack.R")
load("/Users/roman/Box Sync/R/iMage001/data/wtAbscess/wtAbscess#1.1_Sg_thresholdedStack.R")
load("/Users/roman/Box Sync/R/iMage001/data/wtAbscess/wtAbscess#1.1Aa_thresholdedStack.R")
load("/Users/roman/Box Sync/R/iMage001/data/wtAbscess/wtAbscess#1.1Sg_thresholdedStack.R")
load("/Users/roman/Box Sync/R/iMage001/data/wtAbscess/wtAbscess#1.2_Aa_thresholdedStack.R")
