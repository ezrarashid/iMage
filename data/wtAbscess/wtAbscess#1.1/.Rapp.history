stackedObjects <- stackObjects(clusters, summedImage, ext = 30)
display(stackedObjects[,, 8654])
stackedObjects <- stackObjects(clusters, summedImage, ext = 40)
display(stackedObjects[,, 8654])
stackedObjects <- stackObjects(clusters, summedImage, ext = 45)
display(stackedObjects[,, 8654])
features[which(features[,1] == max(features[,1])),]
display(stackedObjects[,, which(features[,1] == max(features[,1]))])
sizeIndex
top <- which(sizeIndex == max(sizeIndex))
display(stackedObjects[,, top])
which(sizeIndex == max(sizeIndex))
max(sizeIndex)
top <- which(sizeIndex == min(sizeIndex))
display(stackedObjects[,, top])
top <- which(sizeIndex == min(sizeIndex), T)
sizeIndex
sizeIndex <- order(features[,1], T)
?order
sizeIndex <- sort(features[,1])
sizeIndex
str(sizeIndex)
top <- which(names(max(sizeIndex)))
top <- names(max(sizeIndex))
top
max(sizeIndex)
top <- max(sizeIndex)
display(stackedObjects[,, top])
top <- rownames(max(sizeIndex))
top
top <- which(max(sizeIndex))
top <- which(sizeIndex == max(sizeIndex))
display(stackedObjects[,, top])
top
sizeIndex <- order(features[,1])
top <- which(sizeIndex == max(sizeIndex))
top
display(stackedObjects[,, top])
top <- which(sizeIndex == min(sizeIndex))
display(stackedObjects[,, top])
sizeIndex <- sort(features[,1])
top <- which(sizeIndex == min(sizeIndex))
display(stackedObjects[,, top])
head(features)
class(sizeIndex)
sizeIndex <- order(features[,1])
class(sizeIndex)
sizeIndex
top <- sizeIndex[1]
display(stackedObjects[,, top])
top <- sizeIndex[length(sizeIndex)]
display(stackedObjects[,, top])
topTen <- sizeIndex[top : top-10]
display(tile(stackedObjects[,, topTen]))
topTen
topTen <- sizeIndex[top-10:top]
topTen
top
length(sizeIndex)
nItems <- length(sizeIndex)#
topTen <- sizeIndex[nItems-10:nItems]#
#
display(tile(stackedObjects[,, topTen]))
topTen
nItems
topTen <- sizeIndex[(nItems-10):nItems]
topTen
display(tile(stackedObjects[,, topTen]))
display(tile(stackedObjects[,, topTen], 10))
nItems <- length(sizeIndex)#
topTen <- sizeIndex[(nItems-14):nItems]#
#
display(tile(stackedObjects[,, topTen], 15))
topTenIndex <- sizeIndex[(nItems-14):nItems]
topTenIndex <- sizeIndex[(nItems-14):nItems]#
#
display(tile(stackedObjects[,, topTenIndex], 15), method = "raster")
quartz("", 15, 1)#
display(tile(stackedObjects[,, topTenIndex], 15), method = "raster")
str(clusters)
str(colouredClusters)
features <- computeFeatures.shape(colouredClusters)
head(colouredClusters@.Data[,,2])
head(colouredClusters@.Data[,,3])
head(colouredClusters@.Data[,,1])
### 2. display the summed image and segmentation#
quartz("", 4, 4)#
colouredClusters <- colorLabels(clusters, F)#
display(summedImage, method = "raster")#
display(colouredClusters, method = "raster")
### 2. display the summed image and segmentation#
quartz("", 4, 4)#
colouredClusters <- colorLabels(clusters)#
display(summedImage, method = "raster")#
display(colouredClusters, method = "raster")
aa <- Image(aa, colormode = "Colour", value = "red")
aa <- Image(aa, colormode = "Colour")
aa <- Image(aa, colormode = T)
aa <- Image(aa, colormode = "Color")
aa <- Image(aa, colormode = "Color", value = "red")
aa <- Image(aa, colormode = "Color")
display(aa)
colourMode(aa) <- "red"
colorMode(aa) <- "red"
colorMode(aa) <- "Colour"
r"
colorMode(aa) <- "Color"
colorMode(aa) <- "Color"
display(aa)
str(aa)
aaObjects <- colorLabels(aa)
paintObjects(aaObjects, aa, col=c(red, NA))
paintObjects(aa, aaObjects, col=c(red, NA))
aaObjects <- bwlabel(aa)
paintObjects(aaObjects, aa, col=c(red, NA))
paintObjects(aa, aaObjects, col=c(red, NA))
str(aaObjects)
# collapse the image stacks#
aa <- readImage(aaFiles[1])#
for(i in 2:length(aaFiles)){#
	aaImage <- readImage(aaFiles[i])#
	aa <- aa + aaImage#
}#
aa[aa > 1] <- 1
aaObjects <- bwlabel(aa)
paintObjects(aa, aaObjects, col=c(red, NA))
paintObjects(aa, aaObjects, col=c("red", NA))
paintObjects(aaObjects, aa, col=c("red", NA))
# collapse the image stacks#
aa <- readImage(aaFiles[1])#
for(i in 2:length(aaFiles)){#
	aaImage <- readImage(aaFiles[i])#
	aa <- aa + aaImage#
}#
aa[aa > 1] <- 1
aaObjects <- bwlabel(aa)
paintObjects(aaObjects, aa, col=c("red", NA))
display(paintObjects(aaObjects, aa, col=c("red", NA)))
display(paintObjects(aaObjects, aa, opac(0, 1), col=c("red", NA)))
display(paintObjects(aaObjects, aa, opac = c(0, 1), col=c("red", NA)))
display(paintObjects(aaObjects, aa, opac = c(1, 0), col=c("red", NA)))
?display
?paintObjects
# collapse the image stacks#
aa <- readImage(aaFiles[1])#
for(i in 2:length(aaFiles)){#
	aaImage <- readImage(aaFiles[i])#
	aa <- aa + aaImage#
}#
aa[aa > 1] <- 1#
sg <- readImage(sgFiles[1])#
for(i in 2:length(sgFiles)){#
	sgImage <- readImage(sgFiles[i])#
	sg <- sg + sgImage#
}#
sg[sg > 1] <- 1
aaObjects <- bwlabel(aa)#
display(paintObjects(aaObjects, aa, opac = c(1, 0), col=c("red", NA)))
display(paintObjects(aaObjects, aa, opac = c(1, 0), col=c(red, NA)))
display(paintObjects(aaObjects, aa, opac = c(1, 0), col=c("#ff0000", NA)))
display(paintObjects(aaObjects, aa, opac = c(0, 1), col=c(NA, "#ff0000")))
display(paintObjects(aaObjects, aa, opac = c(0, 1), col=c(NA, "#ff0000"), thick = F))
aaColored <- paintObjects(aaObjects, aa, opac = c(0, 1), col=c(NA, "#ff0000"), thick = F)
display(aaColored, method = "raster")
str(aaColoured)
str(aaColored)
aaColored <- aa
colourMode(aaColored) <- "Color"
colorMode(aaColored) <- "Color"
aaColored <- paintObjects(aaObjects, aaColored, opac = c(0, 1), col=c(NA, "#ff0000"), thick = F)
display(aaColored, method = "raster")
aaColored <- paintObjects(aaObjects, aaColored, opac = c(0, 1), col=c(NA, "#990000"), thick = F)
display(aaColored, method = "raster")
aaColored <- paintObjects(aaObjects, aaColored, opac = c(0, 1), col=c(NA, "#ff0000"), thick = F)#
display(aaColored, method = "raster")
aaColored <- paintObjects(aaObjects, aaColored, opac = c(0, 1), col=c(NA, "red"), thick = F)
display(aaColored, method = "raster")
str(aaColored)
aaObjects <- bwlabel(aa)#
aaColored <- aa#
colorMode(aaColored) <- "Color"#
aaPainted <- paintObjects(aaObjects, aaColored, opac = c(0, 1), col=c(NA, "red"), thick = F)#
display(aaColored, method = "raster")
aaObjects <- bwlabel(aa)#
aaColored <- aa#
colorMode(aaColored) <- "Color"
str(aaColored)
aaPainted <- paintObjects(aaObjects, aaColored, opac = c(0, 1), col=c(NA, "red"), thick = F)#
display(aaPainted, method = "raster")
aaPainted <- paintObjects(aaObjects, aaColored, opac = c(0, 1), col=c(NA, "#ff0000"), thick = F)
display(aaPainted, method = "raster")
?display
aaPainted <- paintObjects(aaObjects, aaColored, col="#ff0000")
display(aaPainted, method = "raster")
aaObjects <- bwlabel(aa)#
aaColored <- aa#
colorMode(aaColored) <- "Color"#
aaPainted <- paintObjects(aaObjects, aaColored, col="#ff0000")#
display(aaPainted, method = "raster")
str(aaPainted)
str(colouredClusters)
hist(colouredClusters[,,1])
hist(colouredClusters[,,2])
hist(colouredClusters[,,3])
hist(aaPainted)
aaPainted <- paintObjects(aaColored, col="#ff0000")
aaColored <- aa
aaPainted <- paintObjects(aaColored, col="#ff0000")
aaPainted <- paintObjects(aaColored, aaColoured, col="#ff0000")
aaPainted <- paintObjects(aaColored, aaColored, col="#ff0000")
display(aaPainted, method = "raster")
aaPainted <- paintObjects(aaColored, aaColored)
display(aaPainted, method = "raster")
summedImageColor <- Image(summedImage, colormode = "color")
str(summedImageColor)
display(summedImageColour)
display(summedImageColor)
hist(summedImageColor@.Data)
hist(colouredClusters@.Data)
colourArray <- array(0, 3)
dim(colourArray)
colourArray <- array(0, c(512,512,3))
which(aa == 1)
red <- matrix(0, 512, 512)
red[which(aa == 1)] <- 1
colourArray <- array(0, c(512,512,3))#
red <- matrix(0, 512, 512)#
red[which(aa == 1)] <- 1#
blue <- matrix(0, 512, 512)#
green <- matrix(0, 512, 512)#
green[which(sg == 1)] <- 1
summedImageColor@.Data <- colourArray
display(summedImageColor)
which(sg == 1)
str(summedImageColour)
str(summedImageColor)
hist(summedImageColor[,,1])
summedImageColor <- Image(summedImage, colormode = "Color")
# painted summed image#
summedImageColor <- Image(summedImage, colormode = "Color")#
#
colourArray <- array(0, c(512,512,3))#
#
red <- matrix(0, 512, 512)#
red[which(aa == 1)] <- 1#
#
blue <- matrix(0, 512, 512)#
#
green <- matrix(0, 512, 512)#
green[which(sg == 1)] <- 1#
#
colourArray[,,1] <- red#
colourArray[,,2] <- blue#
colourArray[,,3] <- green#
#
summedImageColor@.Data <- colourArray
display(summedImageColor)
red <- matrix(0, 512, 512)#
red[which(aa == 1)] <- 1#
#
green <- matrix(0, 512, 512)#
green[which(sg == 1)] <- 1#
#
blue <- matrix(0, 512, 512)#
#
colourArray[,,1] <- red#
colourArray[,,2] <- green#
colourArray[,,3] <- blue#
#
summedImageColor@.Data <- colourArray#
#
display(summedImageColor)
? stackObjects
colorClusters <-  bwlabel(summedImageColor)
stackedColourObjects <- stackObjects(colorClusters, summedImageColor, ext = 45)
stackedColourObjects <- stackObjects(colorClusters, summedImage, ext = 45)
stackedColourObjects <- stackObjects(clusters, summedImageColour, ext = 45)
stackedColourObjects <- stackObjects(clusters, summedImageColor, ext = 45)
### 3. display the top ten by area#
quartz("", 15, 1)#
display(tile(stackedColourObjects[,, topTenIndex], 15), method = "raster")
topTenIndex
str(stackedColourObjects)
quartz("", 15, 1)#
display(tile(stackedColourObjects[,,, topTenIndex], 15), method = "raster")
hist(features$s.area)
hist(features[,1])
hist(log10(features[,1]))
### 3. size distribution#
quartz("", 4, 4)#
par(fg = grey(0.5), bty = "o")#
hist(log10(features[,1]))
### 3. size distribution#
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1)#
hist(log10(features[,1]), bty = "o")
hist(log10(features[,1]), main = "", xaxt = "n")
hist(log10(features[,1]), main = "", xaxt = "n", xlab = "")
hist(log10(features[,1]), main = "", xlab = "")
### 3. size distribution#
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1)#
hist(log10(features[,1]), main = "", xaxt = "n", xlab = "Area")#
axis(1, 1:3, c(1, 10, 100))
### 3. size distribution#
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1)#
hist(log10(features[,1]), main = "", xaxt = "n", xlab = "Area")#
axis(1, 0:3, c(1, 10, 100, 1000))
### 3. size distribution#
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1, cex  = 0.7)#
hist(log10(features[,1]), main = "", xaxt = "n", xlab = "Area")#
axis(1, 0:3, c(1, 10, 100, 1000))
?hist
### 3. size distribution#
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1, cex  = 0.7)#
hist(log10(features[,1]), main = "", xaxt = "n", xlab = "Area",#
     col = fg)#
axis(1, 0:3, c(1, 10, 100, 1000))
### 3. size distribution#
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1, cex  = 0.7)#
hist(log10(features[,1]), main = "", xaxt = "n", xlab = "Area",#
     col = "grey")#
axis(1, 0:3, c(1, 10, 100, 1000))
### 3. size distribution#
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1, cex  = 0.7)#
hist(log10(features[,1]), main = "", xaxt = "n", xlab = "Area (pixels sq)",#
     col = "grey")#
axis(1, 0:3, c(1, 10, 100, 1000))
sizeFilter <- which(features[,1] > 20)
str(stackedObjects)
sizeFilter
### 3. size distribution#
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1, cex  = 0.7)#
hist(log10(features[sizeFilter,1]), main = "", xaxt = "n", xlab = "Area (pixels sq)",#
     col = "grey")#
axis(1, 0:3, c(1, 10, 100, 1000))
sizeFilter <- which(features[,1] > 5)#
### 3. size distribution#
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1, cex  = 0.7)#
hist(log10(features[sizeFilter,1]), main = "", xaxt = "n", xlab = "Area (pixels sq)",#
     col = "grey")#
axis(1, 0:3, c(1, 10, 100, 1000))
##
# Look at sizes and shapes as a function of genotypic mix#
##
#
rm(list = ls())#
setwd("~/Box Sync/Data/Confocal_Whiteley/EBImage/CompositionAndShapes_SummedImages")#
#
files <- dir(getwd())#
dspFiles <- files[grep("dspB", files)]#
wtFiles <- files[grep("wt", files)]#
#
# read in the data#
wtData <- cbind(name = wtFiles[1], read.csv(wtFiles[1]))#
for(i in 2:length(wtFiles)){#
	wtData <- rbind(wtData, cbind(name = wtFiles[i], read.csv(wtFiles[i])))#
}#
dspData <- cbind(name = dspFiles[1], read.csv(dspFiles[1]))#
for(i in 2:length(dspFiles)){#
	dspData <- rbind(dspData, cbind(name = dspFiles[i], read.csv(dspFiles[i])))#
}#
wtData$treatment <- "wt"#
dspData$treatment <- "dspB"#
dd <- rbind(wtData, dspData)#
#
# remove small clusters#
dd <- subset(dd, s.area > 5)#
wt <- subset(dd, treatment == "wt")#
dspB <- subset(dd, treatment == "dspB")#
#
# setup#
cols <- c("#0000ff30", "#ff000030")#
xl <- range(log10(dd$s.perimeter))#
yl <- range(log10(dd$s.area))#
# plot comparing sizes of clusters#
quartz("", 6, 6)#
par(las = 1, fg = "grey", cex = 0.7)#
laymat <- matrix(c(3, 3, 0, 6,    2, 2, 7, 0, #
                   1, 1, 4, 5,    1, 1, 4, 5),  4, 4, T)#
lay <- layout(laymat, c(2, 2, 1, 1), c(1, 1, 2, 2))#
layout.show(lay)#
par(mar = c(4, 4, 0, 0))#
plot(log10(s.area) ~ log10(s.perimeter), dd, type = "n",#
     xlim = xl, ylim = yl)#
points(log10(s.area) ~ log10(s.perimeter), #
       subset(dd, treatment == "dspB"),#
       col = cols[2])#
points(log10(s.area) ~ log10(s.perimeter), #
       subset(dd, treatment == "wt"),#
       col = cols[1])#
#
par(mar = c(0, 4, 0, 0))#
plot(1, 1, type = "n", xlim = xl, ylim = c(0, 5), axes = F, ylab = "", xlab = "")#
for(i in 1:length(wtFiles)){#
	s <- subset(wt, name == wtFiles[i])#
	h <- hist(log10(s$s.perimeter), breaks = 50, plot = F)#
	polygon(c(h$mids, rev(h$mids)),#
	        c(h$density, rep(0, length(h$mids))),#
	        col = cols[1], border = NA)#
}#
plot(1, 1, type = "n", xlim = xl, ylim = c(0, 5), axes = F, ylab = "", xlab = "")#
for(i in 1:length(dspFiles)){#
	s <- subset(dspB, name == dspFiles[i])#
	h <- hist(log10(s$s.perimeter), breaks = 50, plot = F)#
	polygon(c(h$mids, rev(h$mids)),#
	        c(h$density, rep(0, length(h$mids))),#
	        col = cols[2], border = NA)#
}   #
par(mar = c(4, 0, 0, 0))#
plot(1, 1, type = "n", xlim = c(0, 5), ylim = yl, axes = F, ylab = "", xlab = "")#
for(i in 1:length(wtFiles)){#
	s <- subset(wt, name == wtFiles[i])#
	h <- hist(log10(s$s.area), breaks = 50, plot = F)#
	polygon(c(h$density, rep(0, length(h$mids))),#
	        c(h$mids, rev(h$mids)),#
	        col = cols[1], border = NA)#
}#
plot(1, 1, type = "n", xlim = c(0, 5), ylim = yl, axes = F, ylab = "", xlab = "")#
for(i in 1:length(dspFiles)){#
	s <- subset(dspB, name == dspFiles[i])#
	h <- hist(log10(s$s.area), breaks = 50, plot = F)#
	polygon(c(h$density, rep(0, length(h$mids))),#
	        c(h$mids, rev(h$mids)),#
	        col = cols[2], border = NA)#
}          #
par(mar = c(0, 0, 0, 0))#
plot(1~1, type = "n", axes = F)#
text(1, 1, "∆dspB", col = "red", cex = 2)#
par(mar = c(0, 0, 0, 0))#
plot(1~1, type = "n", axes = F)#
text(1, 1, "WT", col = "blue", cex = 2)#
# # do clumps differ in size between treatments#
# meanArea <- aggregate(log10(s.area) ~ treatment + name, dd, mean)#
# colnames(meanArea)[3] <- "logArea"#
# m1 <- lm(logArea ~ treatment, meanArea)#
# par(mfrow = c(2,2))#
# plot(m1)#
# summary(m1)#
# anova(m1)#
#
# meanPerimeter <- aggregate(log10(s.perimeter) ~ treatment + name, dd, mean)#
# colnames(meanPerimeter)[3] <- "logPerimeter"#
# m2 <- lm(logPerimeter ~ treatment, meanPerimeter)#
# par(mfrow = c(2,2))#
# plot(m2)#
# summary(m2)#
# anova(m2)#
#
# meanRadius <- aggregate(log10(s.radius.mean) ~ treatment + name, dd, mean)#
# colnames(meanRadius)[3] <- "logRadius"#
# m3 <- lm(logRadius ~ treatment, meanRadius)#
# par(mfrow = c(2,2))#
# plot(m3)#
# summary(m3)#
# anova(m3)#
#
# pairs(as.matrix(dd[3:9]))
##
# Look at sizes and shapes as a function of genotypic mix#
##
#
rm(list = ls())#
setwd("~/Box Sync/Data/Confocal_Whiteley/EBImage/CompositionAndShapes_SummedImages")#
#
files <- dir(getwd())#
dspFiles <- files[grep("dspB", files)]#
wtFiles <- files[grep("wt", files)]#
#
# read in the data#
wtData <- cbind(name = wtFiles[1], read.csv(wtFiles[1]))#
for(i in 2:length(wtFiles)){#
	wtData <- rbind(wtData, cbind(name = wtFiles[i], read.csv(wtFiles[i])))#
}#
dspData <- cbind(name = dspFiles[1], read.csv(dspFiles[1]))#
for(i in 2:length(dspFiles)){#
	dspData <- rbind(dspData, cbind(name = dspFiles[i], read.csv(dspFiles[i])))#
}#
wtData$treatment <- "wt"#
dspData$treatment <- "dspB"#
dd <- rbind(wtData, dspData)#
#
# remove small clusters#
dd <- subset(dd, s.area > 10)#
wt <- subset(dd, treatment == "wt")#
dspB <- subset(dd, treatment == "dspB")#
#
# setup#
cols <- c("#0000ff30", "#ff000030")#
xl <- range(log10(dd$s.perimeter))#
yl <- range(log10(dd$s.area))#
# plot comparing sizes of clusters#
quartz("", 6, 6)#
par(las = 1, fg = "grey", cex = 0.7)#
laymat <- matrix(c(3, 3, 0, 6,    2, 2, 7, 0, #
                   1, 1, 4, 5,    1, 1, 4, 5),  4, 4, T)#
lay <- layout(laymat, c(2, 2, 1, 1), c(1, 1, 2, 2))#
layout.show(lay)#
par(mar = c(4, 4, 0, 0))#
plot(log10(s.area) ~ log10(s.perimeter), dd, type = "n",#
     xlim = xl, ylim = yl)#
points(log10(s.area) ~ log10(s.perimeter), #
       subset(dd, treatment == "dspB"),#
       col = cols[2])#
points(log10(s.area) ~ log10(s.perimeter), #
       subset(dd, treatment == "wt"),#
       col = cols[1])#
#
par(mar = c(0, 4, 0, 0))#
plot(1, 1, type = "n", xlim = xl, ylim = c(0, 5), axes = F, ylab = "", xlab = "")#
for(i in 1:length(wtFiles)){#
	s <- subset(wt, name == wtFiles[i])#
	h <- hist(log10(s$s.perimeter), breaks = 50, plot = F)#
	polygon(c(h$mids, rev(h$mids)),#
	        c(h$density, rep(0, length(h$mids))),#
	        col = cols[1], border = NA)#
}#
plot(1, 1, type = "n", xlim = xl, ylim = c(0, 5), axes = F, ylab = "", xlab = "")#
for(i in 1:length(dspFiles)){#
	s <- subset(dspB, name == dspFiles[i])#
	h <- hist(log10(s$s.perimeter), breaks = 50, plot = F)#
	polygon(c(h$mids, rev(h$mids)),#
	        c(h$density, rep(0, length(h$mids))),#
	        col = cols[2], border = NA)#
}   #
par(mar = c(4, 0, 0, 0))#
plot(1, 1, type = "n", xlim = c(0, 5), ylim = yl, axes = F, ylab = "", xlab = "")#
for(i in 1:length(wtFiles)){#
	s <- subset(wt, name == wtFiles[i])#
	h <- hist(log10(s$s.area), breaks = 50, plot = F)#
	polygon(c(h$density, rep(0, length(h$mids))),#
	        c(h$mids, rev(h$mids)),#
	        col = cols[1], border = NA)#
}#
plot(1, 1, type = "n", xlim = c(0, 5), ylim = yl, axes = F, ylab = "", xlab = "")#
for(i in 1:length(dspFiles)){#
	s <- subset(dspB, name == dspFiles[i])#
	h <- hist(log10(s$s.area), breaks = 50, plot = F)#
	polygon(c(h$density, rep(0, length(h$mids))),#
	        c(h$mids, rev(h$mids)),#
	        col = cols[2], border = NA)#
}          #
par(mar = c(0, 0, 0, 0))#
plot(1~1, type = "n", axes = F)#
text(1, 1, "∆dspB", col = "red", cex = 2)#
par(mar = c(0, 0, 0, 0))#
plot(1~1, type = "n", axes = F)#
text(1, 1, "WT", col = "blue", cex = 2)#
# # do clumps differ in size between treatments#
# meanArea <- aggregate(log10(s.area) ~ treatment + name, dd, mean)#
# colnames(meanArea)[3] <- "logArea"#
# m1 <- lm(logArea ~ treatment, meanArea)#
# par(mfrow = c(2,2))#
# plot(m1)#
# summary(m1)#
# anova(m1)#
#
# meanPerimeter <- aggregate(log10(s.perimeter) ~ treatment + name, dd, mean)#
# colnames(meanPerimeter)[3] <- "logPerimeter"#
# m2 <- lm(logPerimeter ~ treatment, meanPerimeter)#
# par(mfrow = c(2,2))#
# plot(m2)#
# summary(m2)#
# anova(m2)#
#
# meanRadius <- aggregate(log10(s.radius.mean) ~ treatment + name, dd, mean)#
# colnames(meanRadius)[3] <- "logRadius"#
# m3 <- lm(logRadius ~ treatment, meanRadius)#
# par(mfrow = c(2,2))#
# plot(m3)#
# summary(m3)#
# anova(m3)#
#
# pairs(as.matrix(dd[3:9]))
filteredClusters <- colouredClusters[sizeFilter]
colouredClusters
##
# Using EBImage:#
# Correlate the strain composition of a cluster with its size and shape#
##
#
rm(list = ls())#
library(EBImage)#
#
setwd("~/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/wt abscess #1.1")#
#
files <- dir(getwd())#
tifFiles <- files[grep("tif", files)]#
#
aaFiles <- tifFiles[grep("Aa", tifFiles)]#
sgFiles <- tifFiles[grep("Sg", tifFiles)]#
#
aa <- readImage(aaFiles)#
sg <- readImage(sgFiles)#
aaSg <- aa + sg#
### 1. display the stack#
quartz("", 13, 1)#
display(tile(aaSg, dim(aaSg)[3]), method = "raster")#
#
# collapse the image stacks#
aa <- readImage(aaFiles[1])#
for(i in 2:length(aaFiles)){#
	aaImage <- readImage(aaFiles[i])#
	aa <- aa + aaImage#
}#
aa[aa > 1] <- 1#
sg <- readImage(sgFiles[1])#
for(i in 2:length(sgFiles)){#
	sgImage <- readImage(sgFiles[i])#
	sg <- sg + sgImage#
}#
sg[sg > 1] <- 1#
#
# add the two collapsed images together#
summedImage <- aa + sg#
summedImage[summedImage == 2] <- 1#
#
# identify clusters in summed image#
clusters <-  bwlabel(summedImage)#
#
### 2. display the summed image and segmentation#
quartz("", 4, 4)#
colouredClusters <- colorLabels(clusters)#
display(summedImage, method = "raster")#
display(colouredClusters, method = "raster")#
#
# individual objects#
stackedObjects <- stackObjects(clusters, summedImage, ext = 45)#
#
# sort by size#
features <- computeFeatures.shape(clusters)#
sizeIndex <- order(features[,1])#
nItems <- length(sizeIndex)#
topTenIndex <- sizeIndex[(nItems-14):nItems]
sizeFilter <- which(features[,1] > 10)#
filteredClusters <- colouredClusters[sizeFilter]#
display(colouredClusters, method = "raster")
filteredClusters <- colouredClusters
filteredObjects <- stackedObjects[,,sizeFilter]
display(filteredObjects, method = "raster")
?stackObjects
filteredObjects <- combine(filteredObjects)
display(filteredObjects, method = "raster")
sizeFilter <- which(features[,1] > 10)#
filteredObjects <- stackedObjects[,,sizeFilter]#
filteredObjects <- combine(filteredObjects)#
display(filteredObjects, method = "raster")
?stackObjects
filteredObjects
filteredIndex <- which(sizeFilter %in% clusters)
filteredIndex
filteredIndex <- which(clusters %in% sizeFilter)
filteredIndex
sizeFilter <- which(features[,1] < 10)
filteredIndex <- which(clusters %in% sizeFilter)
filteredObjects <- clusters
filteredObjects[filteredIndex] <- 0
str(filteredIndex)
str(filteredObjects)
display(filteredObjects)
display(filteredObjects, method = "raster")
### 2. display the summed image and segmentation#
quartz("", 4, 4)#
colouredClusters <- colorLabels(clusters)#
display(summedImage, method = "raster")#
display(colouredClusters, method = "raster")#
#
# individual objects#
stackedObjects <- stackObjects(clusters, summedImage, ext = 45)#
#
# sort by size#
features <- computeFeatures.shape(clusters)#
sizeIndex <- order(features[,1])#
nItems <- length(sizeIndex)#
topTenIndex <- sizeIndex[(nItems-14):nItems]#
#
sizeFilter <- which(features[,1] < 10)#
filteredIndex <- which(clusters %in% sizeFilter)#
#
### 3. display filtered objects#
filteredObjects <- clusters#
filteredObjects[filteredIndex] <- 0#
display(filteredObjects, method = "raster")
filteredObjects <- colouredClusters#
filteredObjects[filteredIndex] <- 0#
display(filteredObjects, method = "raster")
### 3. display filtered objects#
filteredObjects <- colouredClusters#
filteredObjects[filteredIndex] <- 0#
display(filteredObjects, method = "raster")
str(filteredObjects)
filteredObjects@.Data[filteredIndex,,1] <- 0
filteredObjects@.Data[filteredIndex,1] <- 0
filteredObjects@.Data[filteredIndex] <- 0
### 3. display filtered objects#
filteredObjects <- colouredClusters#
filteredObjects@.Data[filteredIndex] <- 0#
display(filteredObjects, method = "raster")
##
# Using EBImage:#
# Correlate the strain composition of a cluster with its size and shape#
##
#
rm(list = ls())#
library(EBImage)#
#
setwd("~/Box Sync/Data/Confocal_Whiteley/Data/2014_11_26 Roman TIFFs/Experiment 1/wt abscess/wt abscess #1.1")#
#
files <- dir(getwd())#
tifFiles <- files[grep("tif", files)]#
#
aaFiles <- tifFiles[grep("Aa", tifFiles)]#
sgFiles <- tifFiles[grep("Sg", tifFiles)]#
#
aa <- readImage(aaFiles)#
sg <- readImage(sgFiles)#
aaSg <- aa + sg#
### 1. display the stack#
quartz("", 13, 1)#
display(tile(aaSg, dim(aaSg)[3]), method = "raster")#
#
# collapse the image stacks#
aa <- readImage(aaFiles[1])#
for(i in 2:length(aaFiles)){#
	aaImage <- readImage(aaFiles[i])#
	aa <- aa + aaImage#
}#
aa[aa > 1] <- 1#
sg <- readImage(sgFiles[1])#
for(i in 2:length(sgFiles)){#
	sgImage <- readImage(sgFiles[i])#
	sg <- sg + sgImage#
}#
sg[sg > 1] <- 1#
#
# add the two collapsed images together#
summedImage <- aa + sg#
summedImage[summedImage == 2] <- 1#
#
# identify clusters in summed image#
clusters <-  bwlabel(summedImage)#
#
### 2. display the summed image and segmentation#
quartz("", 4, 4)#
colouredClusters <- colorLabels(clusters)#
display(summedImage, method = "raster")#
display(colouredClusters, method = "raster")#
#
# individual objects#
stackedObjects <- stackObjects(clusters, summedImage, ext = 45)#
#
# sort by size#
features <- computeFeatures.shape(clusters)#
sizeIndex <- order(features[,1])#
nItems <- length(sizeIndex)#
topTenIndex <- sizeIndex[(nItems-14):nItems]#
#
sizeFilter <- which(features[,1] < 10)#
filteredIndex <- which(clusters %in% sizeFilter)#
#
### 3. display filtered objects#
filteredObjects <- clusters#
filteredObjects[filteredIndex] <- 0#
display(filteredObjects, method = "raster")#
#
### 3. size distribution#
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1, cex  = 0.7)#
hist(log10(features[sizeFilter,1]), main = "", xaxt = "n", xlab = "Area (pixels sq)",#
     col = "grey")#
axis(1, 0:3, c(1, 10, 100, 1000))#
#
### 4. display the top ten by area#
quartz("", 15, 1)#
display(tile(stackedObjects[,, topTenIndex], 15), method = "raster")#
#
# painted summed image#
summedImageColor <- Image(summedImage, colormode = "Color")#
colourArray <- array(0, c(512,512,3))#
#
red <- matrix(0, 512, 512)#
red[which(aa == 1)] <- 1#
green <- matrix(0, 512, 512)#
green[which(sg == 1)] <- 1#
blue <- matrix(0, 512, 512)#
#
colourArray[,,1] <- red#
colourArray[,,2] <- green#
colourArray[,,3] <- blue#
#
summedImageColor@.Data <- colourArray#
display(summedImageColor)#
#
stackedColourObjects <- stackObjects(clusters, summedImageColor, ext = 45)#
#
### 5. display the top ten with strain id coloured#
quartz("", 15, 1)#
display(tile(stackedColourObjects[,,, topTenIndex], 15), method = "raster")
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1, cex  = 0.7)#
hist(log10(features[sizeFilter,1]), main = "", xaxt = "n", xlab = "Area (pixels sq)",#
     col = "grey")#
axis(1, 0:3, c(1, 10, 100, 1000))
quartz("", 4, 4)#
par(fg = grey(0.5), las = 1, cex  = 0.7)#
hist(log10(features[-sizeFilter,1]), main = "", xaxt = "n", xlab = "Area (pixels sq)",#
     col = "grey")#
axis(1, 0:3, c(1, 10, 100, 1000))
